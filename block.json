[{"code":"%s","color":"#FF000000","name":"asdMap","typeName":"","palette":"23","type":"a","spec":"map %s.inputOnly"},{"code":"%s","color":"#FF000000","name":"asdView","typeName":"View","palette":"23","type":"v","spec":"view %s.inputOnly"},{"code":"%s","color":"#FF000000","name":"asdTextView","typeName":"TextView","palette":"23","type":"v","spec":"textview %s.inputOnly"},{"code":"%s","color":"#FF000000","name":"asdEditText","typeName":"EditText","palette":"23","type":"v","spec":"edittext %s.inputOnly"},{"code":"%s","color":"#FF000000","name":"asdButton","typeName":"Button","palette":"23","type":"v","spec":"button %s.inputOnly"},{"code":"%s","color":"#FF000000","name":"asdImageView","typeName":"ImageView","palette":"23","type":"v","spec":"imageview %s.inputOnly"},{"code":"%s","color":"#FF000000","name":"asdListView","typeName":"ListView","palette":"23","type":"v","spec":"listview %s.inputOnly"},{"code":"%s","color":"#FF000000","name":"customView0","typeName":"customViews","palette":"23","type":"p","spec":"customView %s.inputOnly"},{"code":"_reCall();\n\n}\nprivate WindowManager windowManager;\n\nprivate WindowManager.LayoutParams layoutParams;\n\nprivate View displayView;\n\nprivate void showFloatingWindow() {\n\nLayoutInflater layoutInflater \u003d LayoutInflater.from(this);\n\ndisplayView \u003d layoutInflater.inflate(R.layout.%s, null); displayView.setOnTouchListener(new FloatingOnTouchListener());\n\n%s\n\nwindowManager.addView(displayView, layoutParams);\n}\n\nprivate class FloatingOnTouchListener implements View.OnTouchListener { \nprivate int x;\nprivate int y;\n\n@Override public boolean onTouch(View view, MotionEvent event) {\n\nswitch (event.getAction()) { \ncase MotionEvent.ACTION_DOWN: \nx \u003d (int) event.getRawX(); \ny \u003d (int) event.getRawY(); \nbreak;\n\ncase MotionEvent.ACTION_MOVE: int nowX \u003d (int) event.getRawX(); \nint nowY \u003d (int) event.getRawY(); \nint movedX \u003d nowX - x; \nint movedY \u003d nowY - y; \nx \u003d nowX; y \u003d nowY; \nlayoutParams.x \u003d layoutParams.x + movedX; \nlayoutParams.y \u003d layoutParams.y + movedY; windowManager.updateViewLayout(view, layoutParams); \nbreak; \ndefault: \nbreak; \n}\n return true;\n }\n }\n\npublic void closes(){\ntry{\nwindowManager.removeView(displayView);\n}\ncatch(Exception e){\n        }\n    }\nprivate void _reCall(){","color":"#FF000000","name":"FloatingWindowLibrary","typeName":"","palette":"23","type":"c","spec":"floatingWindowLibrary view %m.customViews "},{"code":"android.provider.Settings.canDrawOverlays(%s.this)","color":"#FF000000","name":"canDrawOverlays","typeName":"","palette":"23","type":"b","spec":"%m.activity canDrawOverlays"},{"code":"Intent intent \u003d new Intent(android.provider.Settings.ACTION_MANAGE_OVERLAY_PERMISSION,\nUri.parse(\"package:\" + getPackageName()));\nstartActivity(intent);","color":"#FF000000","name":"getPermissionOverlay","typeName":"","palette":"23","type":" ","spec":"getOverLayPermission"},{"code":"showFloatingWindow();","color":"#FF000000","name":"showFloatingWindow","typeName":"","palette":"23","type":" ","spec":"showFloatingWindow"},{"code":"closes();","color":"#FF000000","name":"closeWindow","typeName":"","palette":"23","type":"f","spec":"closeWindow"},{"code":"final %s \u003d displayView.findViewById(R.id.%s);","color":"#FF000000","name":"FloatingFindViewID","typeName":"","palette":"23","type":" ","spec":"%s.inputOnly findViewById %s.inputOnly "},{"code":"windowManager \u003d (WindowManager) getSystemService(WINDOW_SERVICE); \nlayoutParams \u003d new WindowManager.LayoutParams();\nif (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.O) { \nlayoutParams.type \u003d WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY; \n} else { \nlayoutParams.type \u003d WindowManager.LayoutParams.TYPE_PHONE; \n}\nlayoutParams.format \u003d PixelFormat.RGBA_8888; layoutParams.gravity \u003d Gravity.LEFT | Gravity.TOP; layoutParams.flags \u003d WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE; layoutParams.width \u003d WindowManager.LayoutParams.WRAP_CONTENT; layoutParams.height \u003d WindowManager.LayoutParams.WRAP_CONTENT; layoutParams.x \u003d 0;\nlayoutParams.y \u003d 0;","color":"#FF000000","name":"onCreateFW","typeName":"","palette":"23","type":" ","spec":"addToOnCreateActivity"},{"code":"%s.setOnClickListener(new View.OnClickListener(){\n@Override\npublic void onClick(View _view){\n%s\n}\n});","name":"setOnClickListener","palette":"10","type":"c","spec":"When %m.view On Clicked"},{"code":"%s.setOnLongClickListener(new View.OnLongClickListener(){\n@Override\npublic boolean onLongClick(View _view){\n%s\nreturn false;\n}\n});","name":"setOnLongClickListener","palette":"10","type":"c","spec":"When %m.view On Long Clicked"},{"code":"%s.setOnScrollChangeListener(new View.OnScrollChangeListener(){\n@Override\npublic void onScrollChange(View _view, int _x, int _y, int _oldX, int _oldY){\n%s\n}\n});","name":"setOnScrollChanged","palette":"10","type":"c","spec":"When %m.view On Scroll Changed"},{"code":"%s","name":"getVariableView","typeName":"View","palette":"10","type":"v","spec":"getVariableView %s.inputOnly"},{"code":"%s","name":"getVariableImageView","typeName":"ImageView","palette":"10","type":"v","spec":"getVariableImageView %s.inputOnly"},{"code":"%s","name":"getVariableTextView","typeName":"TextView","palette":"10","type":"v","spec":"getVariableTextView %s.inputOnly"},{"code":"%s","name":"getVariableEditText","typeName":"EditText","palette":"10","type":"v","spec":"getVariableEditText %s.inputOnly"},{"code":"%s","name":"getVariableListView","typeName":"ListView","palette":"10","type":"v","spec":"getVariableListview %s.inputOnly"},{"code":"%s.setLayoutParams(new LinearLayout.LayoutParams(%s, %s));","name":"setLayoutParamsView","palette":"10","type":" ","spec":"%m.view setLayoutParams Width %d Height %d"},{"code":"%s.addView(%s);","name":"addNewView","palette":"10","type":" ","spec":"%m.view addView %m.view"},{"code":"%s.setBackground(androidx.core.content.ContextCompat.getDrawable(getApplicationContext(), R.drawable.%s));","name":"setBackgroundDrawable","palette":"10","type":" ","spec":"%m.view setBackgroundDrawable %s.inputOnly"},{"code":"%s.performClick();","name":"performClick","palette":"10","type":" ","spec":"%m.view performClick"},{"code":"final %s %s \u003d getLayoutInflater().inflate(R.layout.%s, null);","name":"createViewInflater","palette":"10","type":" ","spec":"Create View %s.inputOnly Var %s.inputOnly From Layout %s.inputOnly"},{"code":"final %s %s \u003d new %s(%s);","name":"createViewProgrammatically","palette":"10","type":" ","spec":"Create View %s.inputOnly Var %s.inputOnly New View %s.inputOnly Context %s.inputOnly"},{"code":"%s \u003d new %s(%s.this);","name":"createPublicViewProgrammatically","palette":"10","type":" ","spec":"%s.inputOnly New View %s.inputOnly On %m.activity"},{"code":"%s.removeAllViews();","name":"removeAllViews","palette":"10","type":" ","spec":"%m.view removeAllViews"},{"code":"%s \u003d findViewById(R.id.%s);","name":"findViewById","palette":"10","type":" ","spec":"%m.view findViewById %s.inputOnly"},{"code":"%s \u003d %s.findViewById(R.id.%s);","name":"findViewOnView","palette":"10","type":" ","spec":"%m.view On %m.view findViewById %s.inputOnly"},{"code":"getSupportActionBar().setHomeAsUpIndicator(R.drawable.%s);","name":"setIconToolbar","palette":"10","type":" ","spec":"setIconToolbar %m.resource_bg"},{"code":"%s.setTranslationZ((float)%s);","color":"#FFF44336","name":"setTranzationZ","typeName":"","palette":"10","type":" ","spec":"%m.view setTranzlationZ %d"},{"code":"%s.setError(%s);","name":"setErrorText","palette":"10","type":" ","spec":"%m.edittext setError %s"},{"code":"com.google.android.material.snackbar.Snackbar.make(%s, %s, com.google.android.material.snackbar.Snackbar.LENGTH_LONG).show();","name":"showSnackBarOnly","palette":"10","type":" ","spec":"showSnackBar On %m.view Message %s"},{"code":"com.google.android.material.snackbar.Snackbar.make(%s, %s, com.google.android.material.snackbar.Snackbar.LENGTH_INDEFINITE)\n.setAction(%s, new OnClickListener() {\n@Override\npublic void onClick(View v) {\n%s\n}\n}).show();","name":"showSnackBarWithAction","palette":"10","type":"c","spec":"showSnackBar On %m.view Message %s Action %s"},{"code":"%s.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);","name":"setTextTypePassword","palette":"10","type":" ","spec":"%m.edittext setTextTypePassword"},{"code":"%s.setTextSize((float)%s);","name":"setTextSize","palette":"10","type":" ","spec":"%m.textview setTextSize %d"},{"code":"View %1$s \u003d  ((LayoutInflater)getApplicationContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.%2$s, null, false);\n%3$s.addFooterView(%1$s);","name":"AddFooterListToListView","palette":"10","type":" ","spec":"ViewFooter %s.inputOnly addCustomLayout%s.inputOnly toListView%m.listview"},{"code":"%1$s.setText(%2$s);","name":"SpanSetToTextView","palette":"10","type":" ","spec":"%m.textview setSpan %s.inputOnly"},{"code":"android.content.ClipboardManager clipboard \u003d (android.content.ClipboardManager) getSystemService(CLIPBOARD_SERVICE);\n  ClipData clipData \u003d clipboard.getPrimaryClip(); \n  if ((clipData !\u003d null)) { \n   clipdata \u003d clipData.getItemAt(0).getText().toString();; \n   %1$s.setText(clipdata); \n  } ","name":"Paste ClipboardManager","palette":"10","type":" ","spec":"Paste ClipboardManager to %m.textview "},{"code":"new Object (){ private String timeOfDay(){\n\t\t\tint td \u003d (Calendar.getInstance()).get(Calendar.HOUR_OF_DAY);\n\t\t\tif(td \u003e\u003d 0 \u0026\u0026 td \u003c 12) return \"Good Morning\";\n\t\t\t\telse if(td \u003e\u003d 12 \u0026\u0026 td \u003c 16) return \"Good Afternoon\";\n\t\t\t\telse if(td \u003e\u003d 16 \u0026\u0026 td \u003c 21) return \"Good Evening\";\n\t\t\t\telse return \"Good Night\";}}.timeOfDay()","color":"#FFF44336","name":"getTimeOfDay","typeName":"","palette":"10","type":"s","spec":"getTimeOfDay"},{"code":"new Toast(%1$s.this){\n\t\t\tprivate void showT(){\n\t\t\t\tmakeText(%1$s.this,\"\",Toast.LENGTH_LONG);\n\t\t\t\tsetView((new View(%1$s.this){\n\t\t\t\t\t\t\tprivate TextView set(){\n\t\t\t\t\t\t\t\tTextView tv \u003d new TextView(MainActivity.this);\n\t\t\t\t\t\t\t\ttv.setText(%2$s);\n\t\t\t\t\t\t\t\ttv.setTextColor(%3$s);\ntv.setTextSize(%4$s);\n\t\t\t\t\t\t\t\ttv.setTypeface(null,(int)Double.parseDouble(\"%5$s\".replace(\"bold|italic\",\"3\").replace(\"bold\",\"1\").replace(\"italic\",\"2\").replace(\"normal\", \"0\")));\n\t\t\t\t\t\t\t\treturn tv;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}).set());\n\t\t\t\tshow();\n\t\t\t}\n\t}.showT();","color":"#FFF44336","name":"showTextViewToast","typeName":"","palette":"10","type":" ","spec":"%m.activity showToast message %s  color %m.color size %d  style %m.typeface"},{"code":"%s.setAnimation(%s);","name":"Lottie setAnimation","palette":"15","type":" ","spec":"%m.LottieAnimationView setAnimation %s"},{"code":"%s.setRepeatCount(%s);","name":"setRepeatCountLottie","palette":"15","type":" ","spec":"%m.LottieAnimationView setRepeatCount %d"},{"code":"%s.setRepeatMode(com.airbnb.lottie.LottieDrawable.%s);","name":"setRepeatModeLottie","palette":"15","type":" ","spec":"%m.LottieAnimationView setRepeatMode %s.inputOnly"},{"code":"%s.playAnimation();","name":"playAnimationLottie","palette":"15","type":" ","spec":"%m.LottieAnimationView playAnimation"},{"code":"%s","name":"getVarAnimationDrawable","typeName":"AnimationDrawable","palette":"11","type":"v","spec":"getVarAnimationDrawable %s.inputOnly"},{"code":"android.graphics.drawable.AnimationDrawable %s \u003d (android.graphics.drawable.AnimationDrawable) %s.getBackground();","name":"createNewAnimationDrawable","palette":"11","type":" ","spec":"createNewAnimationDrawable %s.inputOnly From %m.view"},{"code":"%s.setEnterFadeDuration(%s);","name":"setEnterFadeDuration","palette":"11","type":" ","spec":"%m.AnimationDrawable setEnterFadeDuration %d"},{"code":"%s.setExitFadeDuration(%s);","name":"setExitFadeDuration","palette":"11","type":" ","spec":"%m.AnimationDrawable setExitFadeDuration %d"},{"code":"%s.start();","name":"startAnimationDrawable","palette":"11","type":" ","spec":"%m.AnimationDrawable startAnimation"},{"code":"%1$s.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onCheckedChanged(CompoundButton _param1, boolean _param2)  {\r\n\t\t\t\tfinal boolean _isChecked \u003d _param2;\r\n\t\t\t\tif (_isChecked) {\r\n\t\t\t\t\t%2$s\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t%3$s\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});","name":"SwitchListener","palette":"12","type":"e","spec":"Switch %s.inputOnly onCheckChange ifChecked"},{"code":"switch(%s){\n%s\n}","name":"switchString","palette":"12","type":"c","spec":"switch %s"},{"code":"switch(%s){\n%s\n}","name":"switchNumber","palette":"12","type":"c","spec":"switch %d"},{"code":"case %s :\n%s\nreturn true;","name":"caseString","palette":"12","type":"c","spec":"case %s"},{"code":"case %s :\n%s\nreturn true;","name":"caseNumber","palette":"12","type":"c","spec":"case %d"},{"code":"default :\n%s","name":"caseDefault","palette":"12","type":"c","spec":"default"},{"code":"try{\n%s\n}catch(Exception e){\n%s\n}","name":"tryCatch","palette":"12","type":"e","spec":"Try","spec2":"Cat"},{"code":"while(%s){\n%s\n}","name":"whileOnly","palette":"12","type":"c","spec":"while %b"},{"code":"for(int %s\u003d%s;%s;%s){\n%s\n}","name":"forLooping","palette":"12","type":"c","spec":"for %s.inputOnly \u003d %d and %b and %s.inputOnly"},{"code":"%s.setCancelable(%s);","name":"AlertDialog setCancelable","palette":"13","type":" ","spec":"%m.dialog setCancelable %b"},{"code":"%s.setIcon(R.drawable.%s);","name":"AlertDialog setIcon","palette":"13","type":" ","spec":"%m.dialog setIcon %m.resource_bg"},{"code":"%s.setView(%s);","name":"AlertDialog setView","palette":"13","type":" ","spec":"%m.dialog setView %m.view"},{"code":"_dialog.dismiss();","name":"AlertDialog dismiss","palette":"13","type":" ","spec":"%m.dialog dismiss"},{"code":"CFAlertDialog.Builder %1$s \u003d new CFAlertDialog.Builder(%2$s.this);","name":"CFAlertInitialize","palette":"14","type":" ","spec":"CFAlertBuilder %m.CFAlertDialog.Builder at%m.activity"},{"code":"%1$s.setDialogStyle(CFAlertDialog.CFAlertStyle.BOTTOM_SHEET);","name":"CFAlertStyle","palette":"14","type":" ","spec":"%m.CFAlertDialog.Builder Style.BOTTOM_SHEET"},{"code":"%1$s.setTitle(%2$s);","name":"CFAlertTitle","palette":"14","type":" ","spec":"%m.CFAlertDialog.Builder CFAlertSetTitle %s"},{"code":"%1$s.setMessage(%2$s);","name":"CFAlertSetMessage","palette":"14","type":" ","spec":"%m.CFAlertDialog.Builder CFAlertSetMessage %s"},{"code":"%1$s.setTextGravity(Gravity.START);","name":"CFAlertGravityStart","palette":"14","type":" ","spec":"%m.CFAlertDialog.Builder setGravity.START"},{"code":"%1$s.addButton(%2$s , -1, -1, CFAlertActionStyle.POSITIVE, getButtonGravity(), new DialogInterface.OnClickListener() {\n@Override\npublic void onClick(DialogInterface dialog, int which) {\n%3$s\n}\n});","name":"CFAlertPositiveButton","palette":"14","type":"c","spec":"%m.CFAlertDialog.Builder addPositiveButtonText %s"},{"code":"%1$s.addButton(%2$s , -1, -1, CFAlertActionStyle.NEGATIVE, getButtonGravity(), new DialogInterface.OnClickListener() {\n@Override\npublic void onClick(DialogInterface dialog, int which) {\n%3$s\n}\n});","name":"CFAlertNegativeButton","palette":"14","type":"c","spec":"%m.CFAlertDialog.Builder addNegativeButtonText %s"},{"code":"%1$s \u003d %2$s.show();","name":"CFAlertShow","palette":"14","type":" ","spec":"CFAlert %m.CFAlertDialog Builder %m.CFAlertDialog.Builder show"},{"code":"%1$s.dismiss();","name":"CFAlertDismiss","palette":"14","type":" ","spec":"CFAlert %m.CFAlertDialog dismiss"},{"code":"}\nprivate CFAlertActionAlignment getButtonGravity() {\nreturn CFAlertActionAlignment.JUSTIFIED;\n}\n{","name":"CFAlertActionAlignment","palette":"14","type":" ","spec":"CFAlertActionAlignment.JUSTIFIED"},{"code":"%1$s.setIcon(R.drawable.%2$s);","name":"CFAlertIcon","palette":"14","type":" ","spec":"%m.CFAlertDialog.Builder CFAlertSetIcon %m.resource"},{"code":"%1$s.setHeaderView(R.layout.%2$s);","name":"CFAlertHeaderLayout","palette":"14","type":" ","spec":"CFAlertBuilder %m.CFAlertDialog.Builder setHeaderLayout %s.inputOnly"},{"code":"final AlertDialog %1$s \u003d new AlertDialog.Builder(%2$s.this).create();","name":"CreateCustomDialog","palette":"16","type":" ","spec":"AlertDialog %s.inputOnly at %m.activity create"},{"code":"LayoutInflater %1$s \u003d getLayoutInflater();\n\nView convertView \u003d (View) %1$s.inflate(R.layout.%2$s, null);","name":"LayoutInflateDialog","palette":"16","type":" ","spec":"LayoutInflaterDialog name %s.inputOnly nameCustomView %s.inputOnly"},{"code":"%1$s.setView(convertView);","name":"AlertDialogAddView","palette":"16","type":" ","spec":"AlertDialog %s.inputOnly addConvertView"},{"code":"TextView %1$s \u003d (TextView)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetTextView","palette":"16","type":" ","spec":"WidgetTextView name %s.inputOnly"},{"code":"ImageView %1$s \u003d (ImageView)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetImageView","palette":"16","type":" ","spec":"WidgetImageView name %s.inputOnly"},{"code":"Button %1$s \u003d (Button)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetButton","palette":"16","type":" ","spec":"WidgetButton name %s.inputOnly"},{"code":"LinearLayout %1$s \u003d (LinearLayout)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetLinearLayout","palette":"16","type":" ","spec":"WidgetLinearLayout name %s.inputOnly"},{"code":"EditText %1$s \u003d (EditText)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetEditText","palette":"16","type":" ","spec":"WidgetEditText name %s.inputOnly"},{"code":"ProgressBar %1$s \u003d (ProgressBar)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetProgressBar","palette":"16","type":" ","spec":"WidgetProgressBar name %s.inputOnly"},{"code":"Switch %1$s \u003d (Switch)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetSwitch","palette":"16","type":" ","spec":"WidgetSwitch name %s.inputOnly"},{"code":"%1$s.setOnClickListener(new View.OnClickListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onClick(View _view) {\r\n\t\t\t\t%2$s\r\n\t\t\t}\r\n\t\t});","name":"ViewOnClick","palette":"16","type":"c","spec":"%s.inputOnly onClickListener"},{"code":"%1$s.setText(%2$s);","name":"SetText","palette":"16","type":" ","spec":"%s.inputOnly setText %s"},{"code":"%1$s.setProgress((int)%2$s);","name":"setProgress","palette":"16","type":" ","spec":"ProgressBar %s.inputOnly setProgress %d"},{"code":"%1$s.setImageResource(R.drawable.%2$s);","name":"SetImageFromResource","palette":"16","type":" ","spec":"Image %s.inputOnly setFromRes %m.resource"},{"code":"%1$s.setImageBitmap(FileUtil.decodeSampleBitmapFromPath(FileUtil.getExternalStorageDir().concat(%2$s), 1024, 1024));","name":"SetImageFromPath","palette":"16","type":" ","spec":"Image %s.inputOnly setFromPath %s"},{"code":"Glide.with(getApplicationContext()).load(Uri.parse(%2$s)).into(%1$s);","name":"SetImageFromURL","palette":"16","type":" ","spec":"Image %s.inputOnly setFromURL %s"},{"code":"%1$s.setChecked(%2$s);","name":"SwitchSetCheck","palette":"16","type":" ","spec":"Switch %s.inputOnly SetCheck%b"},{"code":"%1$s.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onCheckedChanged(CompoundButton _param1, boolean _param2)  {\r\n\t\t\t\tfinal boolean _isChecked \u003d _param2;\r\n\t\t\t\tif (_isChecked) {\r\n\t\t\t\t\t%2$s\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t%3$s\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});","name":"SwitchListener","palette":"16","type":"e","spec":"Switch %s.inputOnly onCheckChange ifChecked"},{"code":"%1$s.addTextChangedListener(new TextWatcher() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onTextChanged(CharSequence _param1, int _param2, int _param3, int _param4) {\r\n\t\t\t\tfinal String _charSeq \u003d _param1.toString();\r\n\t\t\t\t%2$s\r\n\t\t\t}\r\n\t\t\t@Override\r\n\t\t\tpublic void beforeTextChanged(CharSequence _param1, int _param2, int _param3, int _param4) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void afterTextChanged(Editable _param1) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});","name":"addTextChangedListener","palette":"16","type":"c","spec":"EditText %s.inputOnly getStringText  _charSeq"},{"code":"_charSeq","name":"_charSeq","palette":"16","type":"s","spec":"_charSeq"},{"code":"LottieAnimationView %1$s \u003d new LottieAnimationView(%2$s.this);\n%1$s.setAnimation(%3$s);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(-1, -1));\n%1$s.setRepeatCount(-1);\n%1$s.setRepeatMode(com.airbnb.lottie.LottieDrawable.RESTART);\n%4$s.addView(%1$s);\n%1$s.playAnimation();","name":"addLottieWidget","palette":"16","type":" ","spec":"Lottie name %s.inputOnly at %m.activity assetsFile %s inflateToLayout %s.inputOnly"},{"code":"%1$s.setCancelable(%2$s);","name":"DialogCancelable","palette":"16","type":" ","spec":"Dialog %s.inputOnly setCancelable %b"},{"code":"%1$s.show();","name":"DialogShow","palette":"16","type":" ","spec":"Dialog %s.inputOnly show"},{"code":"%1$s.dismiss();","name":"DialogDismiss","palette":"16","type":" ","spec":"Dialog %s.inputOnly dismiss"},{"code":"%1$s.getProgress();","name":"ProgressBarGetProgress","palette":"16","type":"d","spec":"%s.inputOnly getProgress"},{"code":"%1$s.setMax((int)%2$s);","name":"ProgressBarSetMax","palette":"16","type":" ","spec":"ProgressBar %s.inputOnly setMax %d"},{"code":"%1$s.setShowSoftInputOnFocus(%2$s);","name":"EditTextKeyBoard","palette":"16","type":" ","spec":"EditText %s.inputOnly keyBoard %b"},{"code":"%1$s","name":"asdLinearLayout","typeName":"LinearLayout","palette":"16","type":"v","spec":"LinearLayout %s.inputOnly"},{"code":"%1$s.getWindow().setBackgroundDrawableResource(android.R.color.transparent);","name":"DialogSetTransparent","palette":"16","type":" ","spec":"%s.inputOnly set TransparentColor"},{"code":"%1$s","name":"asdTextView","typeName":"TextView","palette":"16","type":"v","spec":"TextView %s.inputOnly"},{"code":"WebView %1$s \u003d (WebView)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetWebView","palette":"16","type":" ","spec":"WidgetWebView name %s.inputOnly"},{"code":"%1$s","name":"asdImageView","typeName":"ImageView","palette":"16","type":"v","spec":"ImageView %s.inputOnly"},{"code":"Window window \u003d %1$s.getWindow();\nWindowManager.LayoutParams wlp \u003d window.getAttributes();\n\nwlp.gravity \u003d Gravity.%2$S;\nwlp.flags \u0026\u003d ~WindowManager.LayoutParams.FLAG_DIM_BEHIND;\nwindow.setAttributes(wlp);","name":"DialogPosition","palette":"16","type":" ","spec":"Dialog %s.inputOnly setPosition %s.inputOnly"},{"code":"%s","name":"getVarFile","typeName":"File","palette":"17","type":"v","spec":"getVarFile %s.inputOnly"},{"code":"%s","name":"getVarJarFile","typeName":"JarFile","palette":"17","type":"v","spec":"getVarJarFile %s.inputOnly"},{"code":"%s","name":"getVarZipEntry","typeName":"ZipEntry","palette":"17","type":"v","spec":"getVarZipEntry %s.inputOnly"},{"code":"%s","name":"getVarInputStream","typeName":"InputStream","palette":"17","type":"v","spec":"getVarInputStream %s.inputOnly"},{"code":"File %s \u003d new File(%s);","name":"createNewFile","palette":"17","type":" ","spec":"%m.File Create New File Path %s"},{"code":"%s.getAbsolutePath()","name":"getAbsoluteFilePath","palette":"17","type":"s","spec":"%m.File getAbsoluteFilePath"},{"code":"%s.canExecute()","name":"canExecuteFile","palette":"17","type":"b","spec":"%m.File canExecute"},{"code":"%s.canRead()","name":"canReadFile","palette":"17","type":"b","spec":"%m.File canRead"},{"code":"%s.canWrite()","name":"canWriteFile","palette":"17","type":"b","spec":"%m.File canWrite"},{"code":"%s.getName()","name":"getNameFile","palette":"17","type":"s","spec":"%m.File getName"},{"code":"%s.renameTo(new File(%s));","name":"renameFile","palette":"17","type":"b","spec":"%m.File renameFile %s"},{"code":"java.util.jar.JarFile %s \u003d new java.util.jar.JarFile(new java.io.File(%s));","name":"createNewJarFile","palette":"17","type":" ","spec":"%m.JarFile Create New Jar File Path %s"},{"code":"%s.getEntry(%s);","name":"getEntryJar","typeName":"ZipEntry","palette":"17","type":"v","spec":"%m.JarFile getEntry %s"},{"code":"%s.getEntry(%s);","name":"getInputStreamJar","typeName":"InputStream","palette":"17","type":"v","spec":"%m.JarFile getInputStreamJar To ZipEntry %m.ZipEntry"},{"code":"getApplicationContext().getContentResolver().query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, null, null, null, null)","name":"getAllMusicFiles","typeName":"ContentResolver","palette":"17","type":"v","spec":"ContentResolver getAllMusicFilesOnStorage"},{"code":"StrictMode.VmPolicy.Builder builder \u003d new StrictMode.VmPolicy.Builder();\nStrictMode.setVmPolicy(builder.build());\n\nif(Build.VERSION.SDK_INT\u003e\u003d24){\n\ntry{\njava.lang.reflect.Method m \u003d StrictMode.class.getMethod(\"disableDeathOnFileUriExposure\");\nm.invoke(null);\n\n}\ncatch(Exception e){\nshowMessage(e.toString());\n}\n}","name":"StrictModeVmPolicy","palette":"18","type":" ","spec":"StrictModeVmPolicy"},{"code":"(int) %1$s","name":"IntValue","typeName":"int","palette":"18","type":"d","spec":"int %d"},{"code":"%1$s \u003d new TypeWriterView(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT));\n%1$s.setTextSize(%3$s);\n%1$s.setGravity(Gravity.%4$S);\n%5$s.addView(%1$s);\r","name":"TypeWriterViewBuild","palette":"18","type":" ","spec":"%m.TypeWriterView at %m.activity TextSize %d Gravity %s.inputOnly addTo %m.view "},{"code":"int typeFaceNumb \u003d 0;\nfinal String FontTypeCust \u003d \"fonts/\"+\"%2$s\"+\".ttf\";\n\nif (\"%3$s\".equals(\"normal\")){\n    typeFaceNumb \u003d 0;\n}\nelse {\nif (\"%3$s\".equals(\"bold\")){\n    typeFaceNumb \u003d 1;\n}\nelse {\nif (\"%3$s\".equals(\"italic\")){\n    typeFaceNumb \u003d 2;\n}\nelse {\n    typeFaceNumb \u003d 3;\n}\n}\n}\n\n\n%1$s.setTypeface(Typeface.createFromAsset(getAssets(), FontTypeCust), typeFaceNumb);\r\n%1$s.setTextColor(%4$s);\r\n\r\n%1$s.setDelay(%5$s);\r\n%1$s.setWithMusic(%6$s);\r","name":"TypeWriterViewStyle","palette":"18","type":" ","spec":"%m.TypeWriterView font %m.font Style %m.typeface Color %m.color setDelay %d withMusic %b"},{"code":"String TypeWriterViewSTR \u003d %2$s;\n%1$s.animateText(TypeWriterViewSTR);\r","name":"RunAnimTypeWriterView","palette":"18","type":" ","spec":"%m.TypeWriterView RunWithStringValue %s"},{"code":"%1$s.removeAnimation();","name":"RemoveTypeWriterView","palette":"18","type":" ","spec":"%m.TypeWriterView RemoveAnimation"},{"code":"final CodeView codeView\u003d(CodeView) _v.findViewById(R.id.codeview);\n\ncodeView.setTheme(CodeViewTheme.%1$s).fillColor();\ncodeView.showCode(%2$s);","name":"CodeView","palette":"18","type":" ","spec":"CodeView Theme %s.inputOnly setCode %s"},{"code":"AJCode.setBackgroundGradient(%s, %s, %s);","color":"#e92467","name":"setGradientBackground","typeName":"","palette":"19","type":" ","spec":" %m.view Set Gradient Background Color1 %m.color Color2 %m.color"},{"code":"%s.setBackground(new android.graphics.drawable.GradientDrawable() { public android.graphics.drawable.GradientDrawable getIns(int a, int b) { this.setCornerRadius(a); this.setColor(b); return this; } }.getIns((int)%s, %s));","color":"#e92467","name":"setCornerRadius","typeName":"","palette":"19","type":" ","spec":"%m.view setCornerRadius %d color %m.color"},{"code":"%s.setBackground(new android.graphics.drawable.GradientDrawable() { public android.graphics.drawable.GradientDrawable getIns(int a, int b, int c) { this.setStroke(a, b); this.setColor(c); return this; } }.getIns((int)%s, %s, %s));","color":"#e92467","name":"setStroke","typeName":"","palette":"19","type":" ","spec":"%m.view setStroke %d strokeColor %m.color bgColor %m.color"},{"code":"%s.setBackground(new android.graphics.drawable.GradientDrawable() { public android.graphics.drawable.GradientDrawable getIns(int a, int b, int c, int d) { this.setCornerRadius(a); this.setStroke(b, c); this.setColor(d); return this; } }.getIns((int)%s, (int)%s, %s, %s));","color":"#e92467","name":"setRadiusAndStroke","typeName":"","palette":"19","type":" ","spec":"%m.view set cornerRadius %d stroke %d strokeColor %m.color bgColor %m.color"},{"code":"%s.getBackground().setColorFilter(%s, PorterDuff.Mode.MULTIPLY);","color":"#e92467","name":"setColorFilterBtn","typeName":"","palette":"19","type":" ","spec":"%m.view setColorFilter %m.color MULTIPLY"},{"code":"%s.setLayoutParams(new LinearLayout.LayoutParams((int)%s, (int)%s));","color":"#e92467","name":"setLayoutParams","typeName":"","palette":"19","type":" ","spec":"%m.view setLayoutParams Width %d Height %d"},{"code":"AJCode.setCircularImageView(%s, R.drawable.%s);","color":"#e92467","name":"setRoundedImageView","typeName":"","palette":"19","type":" ","spec":"%m.imageview Set Circular Image %m.resource"},{"code":"AJCode.setRoundedRipple(%s, %s, %s, %s, %s, %s, %s, %s, %s);","color":"#e92467","name":"setRoundRipple","typeName":"","palette":"19","type":" ","spec":"%m.view Set Rounded Corner LT %d RT %d LB %d RB %d Color %m.color Stroke Size %d Color %m.color Ripple Color %m.color"},{"code":"{ startActivityForResult(chooser, 1, null); }","name":"up","palette":"22","type":" ","spec":"Start it"},{"code":"%1$s.setBorderColor(%2$s);","name":"CIV setBorderColor","palette":"20","type":" ","spec":"%m.CircleImageView setBorderColor %m.color"},{"code":"%1$s.setBorderOverlay(%2$s);","name":"CIV setBorderOverlay","palette":"20","type":" ","spec":"%m.CircleImageView setBorderOverlay %b"},{"code":"%1$s.setBorderWidth(%2$s);","name":"CIV setBorderWidth","palette":"20","type":" ","spec":"%m.CircleImageView setBorderWidth %d"},{"code":"%1$s.setCircleBackgroundColor(%2$s);","name":"CIV setCircleBackgroundColor","palette":"20","type":" ","spec":"%m.CircleImageView setCircleBackgroundColor %m.color"},{"code":"%1$s.setCircleBackgroundColorResource(R.drawable.%2$s);","name":"CIV setCircleBackgroundColorResource","palette":"20","type":" ","spec":"%m.CircleImageView setCircleBackgroundColorResource %m.resource_bg"},{"code":"%1$s.setDisableCircularTransformation(%2$s);","name":"CIV setDisableCircularTransformation","palette":"20","type":" ","spec":"%m.CircleImageView setDisableCircularTransformation %b"},{"code":"%1$s.setImageResource(R.drawable.%2$s);","name":"CIV setImageResource","palette":"20","type":" ","spec":"%m.CircleImageView setImageResource %m.resource_bg"},{"code":"%1$s.setImageURI(android.net.Uri.parse(%2$s));","name":"CIV setImageURI","palette":"20","type":" ","spec":"%m.CircleImageView setImageURI %s"},{"code":"%2$s \u003d %1$s;\nGlide.with(getApplicationContext()).load(Uri.parse(%3$s)).into(%2$s);","name":"Circle ImageView","palette":"20","type":" ","spec":"%m.CircleImageView \u003e add for%m.imageview Load Url%s"},{"code":"","name":"just Custom Import","palette":"20","type":"s","spec":"this is custom import add it \u003e\u003e com.bumptech.glide.Glide"},{"code":"%1$s.setChecked(%2$s);","color":"#FF9C27B0","name":"SwitchSetCheck","typeName":"","palette":"12","type":" ","spec":"Switch %s.inputOnly SetCheck%b"},{"code":"%1$s.addTextChangedListener(new TextWatcher() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onTextChanged(CharSequence _param1, int _param2, int _param3, int _param4) {\r\n\t\t\t\tfinal String _charSeq \u003d _param1.toString();\r\n\t\t\t\t%2$s\r\n\t\t\t}\r\n\t\t\t@Override\r\n\t\t\tpublic void beforeTextChanged(CharSequence _param1, int _param2, int _param3, int _param4) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void afterTextChanged(Editable _param1) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});","name":"addTextChangedListener","palette":"12","type":"c","spec":"EditText %s.inputOnly getStringText  _charSeq"},{"code":"%setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n\t\t@Override\n\t\t\tpublic void onCheckedChanged(CompoundButton _param1, boolean _param2)  {\n\t\t\t\tfinal boolean _isChecked \u003d _param2;\n%s\n}\n});","color":"#FF9C27B0","name":"setOnCheckedChangeListener","typeName":"","palette":"12","type":"c","spec":"When %m.view Switch Is Checked"},{"code":"getLifecycle().addObserver(%1$s);","name":"Lifecycle","palette":"21","type":" ","spec":"%m.YouTubePlayerView geLifecycle"},{"code":"%1$s.addYouTubePlayerListener(new AbstractYouTubePlayerListener() {\n  @Override\n  public void onReady(@NonNull YouTubePlayer youTubePlayer) {\n    String videoId \u003d %2$s;\n    youTubePlayer.cueVideo(videoId, 0);\n    %3$s\n  }\n});","name":"addYouTubePlayerListener","palette":"21","type":"c","spec":"%m.YouTubePlayerView addYouTubePlayerListener VideoID %s"},{"code":"final YouTubePlayerView %1$s \u003d _v.findViewById(R.id.%1$s);","name":"YouTubeCustomView","palette":"21","type":" ","spec":"YouTubeCustomView %m.YouTubePlayerView"},{"code":"addFullScreenListenerToPlayer();","name":"addFullScreenListener","palette":"21","type":" ","spec":"addFullScreenListener"},{"code":"}\n\nprivate FullScreenHelper fullScreenHelper \u003d new FullScreenHelper(%2$s.this);\n\n    private void addFullScreenListenerToPlayer() {\n        %1$s.addFullScreenListener(new YouTubePlayerFullScreenListener() {\n            @Override\n            public void onYouTubePlayerEnterFullScreen() {\n                setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n                fullScreenHelper.enterFullScreen();\n\n                \n            }\n\n            @Override\n            public void onYouTubePlayerExitFullScreen() {\n                setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\n                fullScreenHelper.exitFullScreen();\n\n                \n            }\n        });\n    }\n{","name":"ListenerFullScreenMode","palette":"21","type":" ","spec":"ListenerFullScreenMode %m.YouTubePlayerView at %m.activity"},{"code":"}\npublic class FullScreenHelper {\n\n    private Activity context;\n    private View[] views;\n\n    /**\n     * @param context\n     * @param views to hide/show\n     */\n    public FullScreenHelper(Activity context, View ... views) {\n        this.context \u003d context;\n        this.views \u003d views;\n    }\n\n    /**\n     * call this method to enter full screen\n     */\n    public void enterFullScreen() {\n        View decorView \u003d context.getWindow().getDecorView();\n\n        hideSystemUi(decorView);\n\n        for(View view : views) {\n            view.setVisibility(View.GONE);\n            view.invalidate();\n        }\n    }\n\n    /**\n     * call this method to exit full screen\n     */\n    public void exitFullScreen() {\n        View decorView \u003d context.getWindow().getDecorView();\n\n        showSystemUi(decorView);\n\n        for(View view : views) {\n            view.setVisibility(View.VISIBLE);\n            view.invalidate();\n        }\n    }\n\n    private void hideSystemUi(View mDecorView) {\n        mDecorView.setSystemUiVisibility(\n                View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n                        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n                        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n                        | View.SYSTEM_UI_FLAG_FULLSCREEN\n                        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n    }\n\n    private void showSystemUi(View mDecorView) {\n        mDecorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE);\n    }\n}\n{","name":"ClassFullScreenMode","palette":"21","type":" ","spec":"ClassFullScreenMode"},{"code":"initPictureInPicture(%1$s);","name":"initPictureInPicture","palette":"21","type":" ","spec":"initPictureInPicture %m.YouTubePlayerView"},{"code":"}\nprivate void initPictureInPicture(YouTubePlayerView youTubePlayerView) {\n        ImageView pictureInPictureIcon \u003d new ImageView(this);\n        pictureInPictureIcon.setImageDrawable(ContextCompat.getDrawable(this, R.drawable.%2$s));\n\n        pictureInPictureIcon.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View _view) {\n\n\t\t\t\t\tif (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.N) {\n\t\t\t\t\t\tboolean supportsPIP \u003d getPackageManager().hasSystemFeature(PackageManager.FEATURE_PICTURE_IN_PICTURE);\n\t\t\t\t\t\tif(supportsPIP)\n\t\t\t\t\t\t\tenterPictureInPictureMode();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnew AlertDialog.Builder(%3$s.this)\n\t\t\t\t\t\t\t.setTitle(\"Can\u0027t enter picture in picture mode\")\n\t\t\t\t\t\t\t.setMessage(\"In order to enter picture in picture mode you need a SDK version \u003e\u003d N.\")\n\t\t\t\t\t\t\t.show();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t});\n\n        youTubePlayerView.getPlayerUiController().addView(pictureInPictureIcon);\n    }\n\n\n@Override\n    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig) {\n        super.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig);\n\n        if(isInPictureInPictureMode) {\n            %1$s.enterFullScreen();\n            %1$s.getPlayerUiController().showUi(false);\n        } else {\n            %1$s.exitFullScreen();\n            %1$s.getPlayerUiController().showUi(true);\n        }\n    }\n\n\n{","name":"Void_initPictureInPicture","palette":"21","type":" ","spec":"Void_initPictureInPicture %m.YouTubePlayerView Icon %m.resource at %m.activity"},{"code":"if (%1$s.isFullScreen()) {\n%1$s.exitFullScreen();\n%2$s\n}\nelse {\n%3$s\n}","name":"BackPressCloseFullScreen","palette":"21","type":"e","spec":"%m.YouTubePlayerView ifFullScreenThen"},{"code":"%1$s intent \u003d new %1$s();","name":"UPI Payment","palette":"22","type":" ","spec":"%m.intent "},{"code":"upi://pay?pa\u003d%1$s\u0026pn\u003d%2$s\u0026tn\u003d%3$s\u0026am\u003d%4$s\u0026cu\u003d%5$s","name":"UPI payment intent","palette":"22","type":"s","spec":"Your UPI Id%s and application name%s Enter Payment Description%s amount%d country name%s"},{"code":"%1$s chooser \u003d %1$s.createChooser(intent, \"Only Bhim UPI\");","name":"Start Upi","palette":"22","type":" ","spec":"UPI Chooser%m.intent"},{"code":"if (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.JELLY_BEAN)","name":"sdk","palette":"22","type":" ","spec":"UPI Int Sdk"},{"code":"%s.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View _view) {\n\t\t\t\t\t%s\n\t\t\t\t}\n\t\t\t});","color":"#FF9C27B0","name":"onViewClickCustom","typeName":"","palette":"12","type":"c","spec":"When %m.view clicked"},{"code":"%s \u003d FirebaseDynamicLinks.getInstance().createDynamicLink().setDomainUriPrefix(%s).setAndroidParameters(new DynamicLink.AndroidParameters.Builder().setMinimumVersion(%s).build()).setLink(Uri.parse(%s)).buildDynamicLink();","name":"FirebaseDynamicLink createDynamicLink","palette":"24","type":" ","spec":"%m.FirebaseDynamicLink createLink Domain %s MinVer %d Link %s"},{"code":"%s.getUri().toString()","name":"FirebaseDynamicLink getLink","palette":"24","type":"s","spec":"%m.FirebaseDynamicLink getLink"},{"code":"FirebaseDynamicLinks.getInstance().getDynamicLink(%2$s.this.getIntent()).addOnSuccessListener(%2$s.this, %1$s_onSuccessLink).addOnFailureListener(%2$s.this, %1$s_onFailureLink);","name":"FirebaseDynamicLink getDynamicLink","palette":"24","type":" ","spec":"%m.FirebaseDynamicLink getDynamicLink On %m.activity"},{"code":"","name":"FirebaseDynamicLink setDataHost","palette":"24","type":" ","spec":"setDataHost Url %s Scheme %s"},{"code":"// manuall link\n        String manuallink  \u003d \"https://indosw.com/jcoderz.php?id\u003d\"+ %1$s +\n                \"\u0026apn\u003d\"+ getPackageName()+\n                \"\u0026st\u003d\"+ %2$s +\n                \"\u0026sd\u003d\"+ %3$s +\n                \"\u0026si\u003d\"+ \"https://firebasestorage.googleapis.com/v0/b/exis62.appspot.com/o/newlogoswrevo.png?alt\u003dmedia\u0026token\u003d19556173-e4ae-487f-b3dc-ef439548c36c\";","name":"GenerateManualDynamicLink","palette":"24","type":" ","spec":"GenerateManualDynamicLink keyID %s Title %s Description %s"},{"code":"%1$s \u003d FirebaseDynamicLinks.getInstance().createDynamicLink()\n                .setLink(Uri.parse(%3$s))\n                .setDomainUriPrefix(%2$s)\n                // Open links with this id.swrevo.app on Android\n                .setAndroidParameters(new DynamicLink.AndroidParameters.Builder().build())\n                // Open links with com.example.ios on iOS\n                //.setIosParameters(new DynamicLink.IosParameters.Builder(\"com.example.ios\").build())\n                .buildDynamicLink();","name":"DynamicLinkFromManual","palette":"24","type":" ","spec":"%m.FirebaseDynamicLink HostDomain %s ManualLink %s"},{"code":"manuallink","name":"ManualLink","typeName":"String","palette":"24","type":"v","spec":"ManualLink"},{"code":"Glide.with(getApplicationContext()).load(Uri.parse(\"https://api.qrserver.com/v1/create-qr-code/?data\u003d\".concat(%1$s))).into(%2$s);","name":"LinkToQRBarcode","palette":"24","type":" ","spec":"Convert Link %s toQRBarcode setToImage %m.imageview"},{"code":"Intent intentDynLink \u003d new Intent();\nintentDynLink.setAction(Intent.ACTION_SEND);\nintentDynLink.putExtra(Intent.EXTRA_TEXT,  %1$s);\nintentDynLink.setType(\"text/plain\");\nstartActivity(intentDynLink);","name":"ShareLink","palette":"24","type":" ","spec":"%s Share"},{"code":"%1$s \u003d FirebaseDynamicLinks.getInstance().createDynamicLink()\n        .setLink(Uri.parse(\"https://indosw.com/jcoderz.php?id\u003d\".concat(%4$s)))\n        .setDomainUriPrefix(%2$s)\n        .setAndroidParameters(\n                new DynamicLink.AndroidParameters.Builder(getPackageName())\n                        .setMinimumVersion(%3$s)\n                        .build())\n        .setSocialMetaTagParameters(\n                new DynamicLink.SocialMetaTagParameters.Builder()\n                        .setTitle(%5$s)\n                        .setDescription(%6$s)\n                        .build())\n        .buildDynamicLink();","name":"DynamicLinkWithMetaTag","palette":"24","type":" ","spec":"%m.FirebaseDynamicLink UriPerfix %s MinVer %d CatchID %s Title %s Descript %s"},{"code":"Task\u003cShortDynamicLink\u003e shortLinkTask \u003d FirebaseDynamicLinks.getInstance().createDynamicLink()\n        .setLongLink(Uri.parse(%1$s))\n        .buildShortDynamicLink()\n        .addOnCompleteListener(%2$s.this, new OnCompleteListener\u003cShortDynamicLink\u003e() {\n            @Override\n            public void onComplete(@NonNull Task\u003cShortDynamicLink\u003e task) {\n                if (task.isSuccessful()) {\n                    // Short link created\n                    Uri shortLink \u003d task.getResult().getShortLink();\n                    Uri flowchartLink \u003d task.getResult().getPreviewLink();\n                    \n                    final String srtLink \u003d shortLink.toString();\n                    final String flwLink \u003d shortLink.toString();\n                    \n                    %3$s\n                    \n                    \n                    \n                    \n                } else {\n                    // Error\n                    \n                    \n                    %4$s\n                    \n                    \n                }\n            }\n        });","name":"ShortenLink","palette":"24","type":"e","spec":"Shorthen LongURL %s at %m.activity ifSuccess"},{"code":"srtLink","name":"srtLink","typeName":"String","palette":"24","type":"v","spec":"srtLink"},{"code":"flwLink","name":"flwLink","typeName":"String","palette":"24","type":"v","spec":"flwLink"},{"code":"Bitmap bmshare \u003d ((android.graphics.drawable.BitmapDrawable) %1$s.getDrawable()).getBitmap();\ntry {\njava.io.File fileBM \u003d new java.io.File(getExternalCacheDir() + \"/\"+%2$s+\".jpg\");\njava.io.OutputStream outFiles \u003d new java.io.FileOutputStream(fileBM);\nbmshare.compress(Bitmap.CompressFormat.JPEG, 100, outFiles);\noutFiles.flush();\noutFiles.close();\n} catch (Exception e) { showMessage(e.toString()); }\nIntent iten \u003d new Intent(android.content.Intent.ACTION_SEND);\niten.setType(\"*/*\");\niten.putExtra(Intent.EXTRA_TEXT,  %3$s);\niten.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new java.io.File(getExternalCacheDir() + \"/\"+%2$s+\".jpg\")));\nstartActivity(Intent.createChooser(iten, \"Share\"));","name":"ShareQRBarcode","palette":"24","type":" ","spec":"ShareQRBarcode %m.imageview asName %s DynamicLink %s"},{"code":"%1$s.substring((int)(%1$s.lastIndexOf(\"jcoderz.php?id\u003d\")), (int)(%1$s.length())).replace(\"jcoderz.php?id\u003d\", \"\");","name":"CatchCoreDynamicLinks","typeName":"String","palette":"24","type":"v","spec":"%s CatchCoreDynamicLinks"},{"code":"%s \u003d new ProgressDialog(%s.this);","name":"ProgressDialog create","palette":"25","type":" ","spec":"ProgressDialog %m.ProgressDialog Create %m.activity"},{"code":"%s.setIndeterminate((int)%s);","name":"ProgressDialog setIndeterminate","palette":"25","type":" ","spec":"ProgressDialog %m.ProgressDialog setIndeterminate %b"},{"code":"%s.setMax((int)%s);","name":"ProgressDialog setMax","palette":"25","type":" ","spec":"ProgressDialog %m.ProgressDialog setMax %d"},{"code":"%s.setMessage(%s);","name":"ProgressDialog setMessage","palette":"25","type":" ","spec":"ProgressDialog %m.ProgressDialog setMessage %s"},{"code":"%s.setProgress((int)%s);","name":"ProgressDialog setProgress","palette":"25","type":" ","spec":"ProgressDialog %m.ProgressDialog setProgress %d"},{"code":"%s.setProgressStyle(ProgressDialog.%s);","name":"ProgressDialog setProgressStyle","palette":"25","type":" ","spec":"ProgressDialog %m.ProgressDialog setProgressStyle %s.inputOnly"},{"code":"%s.getMax()","name":"ProgressDialog getMax","palette":"25","type":"d","spec":"ProgressDialog %m.ProgressDialog getMax"},{"code":"%s.getProgress()","name":"ProgressDialog getProgress","palette":"25","type":"d","spec":"ProgressDialog %m.ProgressDialog getProgress"},{"code":"%s.incrementProgressBy((int)%s);","name":"ProgressDialog incrementProgressBy","palette":"25","type":" ","spec":"ProgressDialog %m.ProgressDialog incrementProgressBy %d"},{"code":"%s.isIndeterminate()","name":"ProgressDialog isIndeterminate","palette":"25","type":"b","spec":"ProgressDialog %m.ProgressDialog isIndeterminate"},{"code":"%s.isShowing()","name":"ProgressDialog isShowing","palette":"25","type":"b","spec":"ProgressDialog %m.ProgressDialog isShowing"},{"code":"%s.show();","name":"ProgressDialog show","palette":"25","type":" ","spec":"ProgressDialog %m.ProgressDialog show"},{"code":"%s.setCancelable(%s);","name":"ProgressDialog setCancelable","palette":"25","type":" ","spec":"ProgressDialog %m.ProgressDialog setCancelable %b"},{"code":"%s.dismiss();","name":"ProgressDialog dismiss","palette":"25","type":" ","spec":"ProgressDialog %m.ProgressDialog dismiss"},{"code":"%s","name":"blockTest","palette":"25","type":"h","spec":"blockTest"},{"code":"%1$s \u003d new AdView(%3$s.this, %2$s, AdSize.BANNER_HEIGHT_50);","name":"FANBanner320_50","palette":"26","type":" ","spec":"Banner 320_50 %m.FBAdsBanner PlaceID %s at %m.activity"},{"code":"%1$s.loadAd();","name":"FANBannerLoad","palette":"26","type":" ","spec":"%m.FBAdsBanner LoadAds"},{"code":"%1$s.addView(%2$s);","name":"AdAdsToView","palette":"26","type":" ","spec":"View %m.view add %m.FBAdsBanner"},{"code":"%1$s \u003d new AdView(%3$s.this, %2$s, AdSize.RECTANGLE_HEIGHT_250);","name":"FANBanner300_250","palette":"26","type":" ","spec":"Banner 300_250 %m.FBAdsBanner PlaceID %s at %m.activity"},{"code":"%1$s \u003d new InterstitialAd(%2$s.this, %3$s);\r","name":"InterstitialAds","palette":"26","type":" ","spec":"%m.FBAdsInterstitial at %m.activity with PlacementID %s"},{"code":"%1$s.loadAd();\r","name":"InterstitialAdsLoad","palette":"26","type":" ","spec":"%m.FBAdsInterstitial LoadAds"},{"code":"%1$s.show();","name":"InterstitialAdsShow","palette":"26","type":" ","spec":"%m.FBAdsInterstitial Show"},{"code":"                // Set listeners for the Interstitial Ad\n\t\t        %1$s.setAdListener(new InterstitialAdListener() {\n\t\t\t            %2$s\n\t\t\t    });","name":"InterstitialAdsListener","palette":"26","type":"c","spec":"%m.FBAdsInterstitial setListener"},{"code":"\n\t\t\t            @Override\n\t\t\t            public void onInterstitialDisplayed(Ad ad) {\n\t\t\t\t                %1$s\n\t\t\t\t                \n\t\t\t\t        }","name":"IntersOnAdsDisplay","palette":"26","type":"c","spec":"IntersOnAdsDisplay"},{"code":"\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onInterstitialDismissed(Ad ad) {\n\t\t\t\t                // Interstitial dismissed callback\n\t\t\t\t                \n\t\t\t\t                %1$s\n\t\t\t\t        }","name":"IntersOnAdsDismiss","palette":"26","type":"c","spec":"IntersOnAdsDismiss"},{"code":"\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onError(Ad ad, AdError adError) {\n\t\t\t\t                // Ad error callback\n\t\t\t\t                \n\t\t\t\t           \r\n\t\t\t\t                final String StringErrorLoadFBAd \u003d adError.getErrorMessage();\r\n\t\t\t\t                %1$s\r\n\t\t\t\t        }","name":"IntersOnAdsError","palette":"26","type":"c","spec":"IntersOnAdsError"},{"code":"StringErrorLoadFBAd","name":"StringErrorLoadFBAd","typeName":"String","palette":"26","type":"v","spec":"StringErrorLoadFBAd"},{"code":"\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onAdLoaded(Ad ad) {\n\t\t\t\t                // Interstitial ad is loaded and ready to be displayed\n\t\t\t\t                \n\t\t\t\t\n\t\t\t\t            \r\n\t\t\t\t                %1$s\r\n\t\t\t            }","name":"IntersOnAdsLoaded","palette":"26","type":"c","spec":"IntersOnAdsLoaded"},{"code":"\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onAdClicked(Ad ad) {\n\t\t\t\t                %1$s\n\t\t\t\t                \n\t\t\t\t            }\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onLoggingImpression(Ad ad) {\n\t\t\t\t                // Ad impression logged callback\n\t\t\t\t                \n\t\t\t\t            }","name":"IntersOnAdsClicks","palette":"26","type":"c","spec":"IntersOnAdsClicks"},{"code":"AudienceNetworkAds.initialize(this);","name":"AudienceNetworkAds_init","palette":"26","type":" ","spec":"AudienceNetworkAds Initialize"},{"code":"AdSettings.setIntegrationErrorMode(INTEGRATION_ERROR_CRASH_DEBUG_MODE);","name":"FBAdsSettings","palette":"26","type":" ","spec":"FBAdsSettings"},{"code":"// Instantiate a NativeAd object.\n        // NOTE: the placement ID will eventually identify this as your App, you can ignore it for\n        // now, while you are testing and replace it later when you have signed up.\n        // While you are using this temporary code you will only get test ads and if you release\n        // your code like this to the Google Play your users will not receive ads (you will get a no fill error).\n        %1$s \u003d new NativeAd(%2$s.this, %3$s);","name":"FBNativeLoad","palette":"26","type":" ","spec":"%m.NativeAd Load at %m.activity withPlacementID %s"},{"code":"\n\t\t        %1$s.setAdListener(new NativeAdListener() {\n\t\t\t            %2$s\n\t\t\t        });","name":"NativeAdsetListener","palette":"26","type":"c","spec":"%m.NativeAd setListener"},{"code":"\n\t\t\t            @Override\n\t\t\t            public void onMediaDownloaded(Ad ad) {\n\t\t\t\t                // Native ad finished downloading all assets\n\t\t\t\t                \n\t\t\t\t            }\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onError(Ad ad, AdError adError) {\n\t\t\t\t                // Native ad failed to load\n\t\t\t\t                final String ErrorNativeLoad \u003d adError.getErrorMessage();\n\t\t\t\t                %1$s\n\t\t\t\t            }","name":"OnErrorLoadNative","palette":"26","type":"c","spec":"OnErrorLoadNative"},{"code":"ErrorNativeLoad","name":"ErrorNativeLoad","typeName":"String","palette":"26","type":"v","spec":"ErrorNativeLoad"},{"code":"\n\t\t\t            @Override\n\t\t\t            public void onAdLoaded(Ad ad) {\n\t\t\t\t                // Native ad is loaded and ready to be displayed\n\t\t\t\t                %1$s\n\t\t\t\t                \n\t\t\t\t            }\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onAdClicked(Ad ad) {\n\t\t\t\t                // Native ad clicked\n\t\t\t\t                \n\t\t\t\t            }\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onLoggingImpression(Ad ad) {\n\t\t\t\t                // Native ad impression\n\t\t\t\t                \n\t\t\t\t            }","name":"OnLoadedNativeAds","palette":"26","type":"c","spec":"OnLoadedNativeAds"},{"code":"                                // Race condition, load() called again before last ad was displayed\n\t\t\t\t                if (%1$s \u003d\u003d null || %1$s !\u003d ad) {\n\t\t\t\t\t                    return;\n\t\t\t\t\t                }\n\t\t\t\t                // Inflate Native Ad into Container\n\t\t\t\t                inflateAd(%1$s);\n\n","name":"InflateNativeToContainer","palette":"26","type":" ","spec":"if %m.NativeAd notNull then InflateNativeAd"},{"code":"%1$s \u003d new NativeAdLayout(%2$s.this);\n%1$s.setLayoutParams(new android.view.ViewGroup.LayoutParams(android.view.ViewGroup.LayoutParams.MATCH_PARENT,\nandroid.view.ViewGroup.LayoutParams.WRAP_CONTENT));\n%3$s.addView(%1$s);","name":"CreateNativeAdLayout","palette":"26","type":" ","spec":"Create %m.NativeAdLayout at %m.activity inflateTo %m.view"},{"code":"\n\t}\n\tprivate void inflateAd(NativeAd %1$s) {\n\t\t\n\t\t        %1$s.unregisterView();\n\t\t        LayoutInflater inflater \u003d LayoutInflater.from(%3$s.this);\n\t\t        // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n\t\t        LinearLayout adViewNative \u003d (LinearLayout) inflater.inflate(R.layout.native_ad_layout, nativeAdLayout, false);\n\t\t        %2$s.addView(adViewNative);\n\t\t\n\t\t        // Add the AdOptionsView\n\t\t        LinearLayout adChoicesContainer \u003d findViewById(R.id.ad_choices_container);\n\t\t        AdOptionsView adOptionsView \u003d new AdOptionsView(%3$s.this, %1$s, %2$s);\n\t\t        adChoicesContainer.removeAllViews();\n\t\t        adChoicesContainer.addView(adOptionsView, 0);\n\t\t\n\t\t        // Create native UI using the ad metadata.\n\t\t        AdIconView nativeAdIcon \u003d adViewNative.findViewById(R.id.native_ad_icon);\n\t\t        TextView nativeAdTitle \u003d adViewNative.findViewById(R.id.native_ad_title);\n\t\t        MediaView nativeAdMedia \u003d adViewNative.findViewById(R.id.native_ad_media);\n\t\t        TextView nativeAdSocialContext \u003d adViewNative.findViewById(R.id.native_ad_social_context);\n\t\t        TextView nativeAdBody \u003d adViewNative.findViewById(R.id.native_ad_body);\n\t\t        TextView sponsoredLabel \u003d adViewNative.findViewById(R.id.native_ad_sponsored_label);\n\t\t        Button nativeAdCallToAction \u003d adViewNative.findViewById(R.id.native_ad_call_to_action);\n\t\t\n\t\t        // Set the Text.\n\t\t        nativeAdTitle.setText(%1$s.getAdvertiserName());\n\t\t        nativeAdBody.setText(%1$s.getAdBodyText());\n\t\t        nativeAdSocialContext.setText(%1$s.getAdSocialContext());\n\t\t        nativeAdCallToAction.setVisibility(%1$s.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n\t\t        nativeAdCallToAction.setText(%1$s.getAdCallToAction());\n\t\t        sponsoredLabel.setText(%1$s.getSponsoredTranslation());\n\t\t\n\t\t        // Create a list of clickable views\n\t\t        List\u003cView\u003e clickableViews \u003d new ArrayList\u003c\u003e();\n\t\t        clickableViews.add(nativeAdTitle);\n\t\t        clickableViews.add(nativeAdCallToAction);\n\t\t\n\t\t        // Register the Title and CTA button to listen for clicks.\n\t\t        %1$s.registerViewForInteraction(\n\t\t                adViewNative,\n\t\t                nativeAdMedia,\n\t\t                nativeAdIcon,\n\t\t                clickableViews);\n\t\t\n\t\t    }\n\t{","name":"ClassInflateNativeAd","palette":"26","type":" ","spec":"Class Inflate %m.NativeAd to %m.NativeAdLayout at %m.activity"},{"code":"%1$s.loadAd();","name":"NativeAdsLoad","palette":"26","type":" ","spec":"%m.NativeAd LoadAds"},{"code":"%s","name":"getVarCursor","typeName":"Cursor","palette":"27","type":"v","spec":"getVarCursor %s.inputOnly"},{"code":"final Cursor %s \u003d %s;","name":"createNewCursor","palette":"27","type":" ","spec":"Create Cursor %s.inputOnly From Content Resolver %m.ContentResolver"},{"code":"%s.close();","name":"closeCursor","palette":"27","type":" ","spec":"%m.Cursor Close"},{"code":"%s.deactive();","name":"deactiveCursor","palette":"27","type":" ","spec":"%m.Cursor Deactive"},{"code":"%s.getColumnCount()","name":"getColumnCountCursor","palette":"27","type":"d","spec":"%m.Cursor getColumnCountCursor"},{"code":"%s.getColumnIndex(%s)","name":"getColumnIndexCursor","palette":"27","type":"d","spec":"%m.Cursor getColumnIndex %s"},{"code":"%s.getColumnIndex(%s)","name":"getColumnNameCursor","palette":"27","type":"s","spec":"%m.Cursor getColumnName %d"},{"code":"%s.getCount()","name":"getCountCursor","palette":"27","type":"d","spec":"%m.Cursor getCount"},{"code":"%s.getCount(%s)","name":"getStringCursor","palette":"27","type":"s","spec":"%m.Cursor getString %d"},{"code":"%s.getPosition()","name":"getPositionCursor","palette":"27","type":"d","spec":"%m.Cursor getPosition"},{"code":"%s.moveToFirst()","name":"moveToFirstCursor","palette":"27","type":"b","spec":"%m.Cursor moveToFirst"},{"code":"%s.moveToLast()","name":"moveToLastCursor","palette":"27","type":"b","spec":"%m.Cursor moveToLast"},{"code":"%s.moveToNext()","name":"moveToNextCursor","palette":"27","type":"b","spec":"%m.Cursor moveToNext"},{"code":"%s.moveToPosition(%s)","name":"moveToPositionCursor","palette":"27","type":"b","spec":"%m.Cursor moveToPosition %d"},{"code":"%s.moveToPrevious()","name":"moveToPeviousCursor","palette":"27","type":"b","spec":"%m.Cursor moveToPrevious"},{"code":"%s.requery()","name":"requeryCursor","palette":"27","type":"b","spec":"%m.Cursor requery"},{"code":"GoogleSignInOptions %1$s \u003d new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN).requestIdToken(%2$s).requestEmail().build();","name":"GoogleSignInOptions","palette":"28","type":" ","spec":"GoogleSignInOptions %m.GoogleSignInOptions ID %s"},{"code":"%1$s \u003d GoogleSignIn.getClient(this, %2$s);","name":"GoogleSignInClient","palette":"28","type":" ","spec":"GoogleSignInClient %m.FirebaseGoogleLogin getClient %m.GoogleSignInOptions"},{"code":"%1$s \u003d FirebaseAuth.getInstance();","name":"FirebaseAuth","palette":"28","type":" ","spec":"%m.FirebaseAuth getInstance"},{"code":"Intent signInIntent \u003d %1$s.getSignInIntent();\n\nstartActivityForResult(signInIntent, REQ_CD_%1$S);","name":"PickGoogleAccount","palette":"28","type":" ","spec":"%m.FirebaseGoogleLogin PickGoogleAccount"},{"code":"}\nprivate void firebaseAuthWithGoogle(String idToken) {\nAuthCredential credential \u003d GoogleAuthProvider.getCredential(idToken, null);\n%1$s.signInWithCredential(credential).addOnCompleteListener(this, new OnCompleteListener\u003cAuthResult\u003e() {\n\n@Override\npublic void onComplete(@NonNull Task\u003cAuthResult\u003e task) {\n%2$s\n}\n});\n}\n//[END auth_with_google]\n{","name":"OnStartGoogleSign","palette":"28","type":"c","spec":"OnStartGoogleSign onFirebaseAuth %m.FirebaseAuth"},{"code":"if (task.isSuccessful()) {\n%1$s\n} else {\n%2$s\n}","name":"ifSuccessGoogleAuth","palette":"28","type":"e","spec":"ifSuccessGoogleAuth"},{"code":"%1$s \u003d %2$s.getCurrentUser();","name":"FirebaseUser","palette":"28","type":" ","spec":"FirebaseUser %m.FirebaseUser getCurrentUser %m.FirebaseAuth"},{"code":"%1$s.signOut();\n\n%2$s.signOut().addOnCompleteListener(%3$s.this, new OnCompleteListener\u003cVoid\u003e() {\n\n@Override\n\npublic void onComplete(@NonNull Task\u003cVoid\u003e task) {\n\n%4$s\n\n}\n});","name":"GoogleSignOut","palette":"28","type":"c","spec":"SignOut for %m.FirebaseAuth and %m.GoogleSignInClient at %m.activity"},{"code":"%1$s \u003d %2$s.getCurrentUser();\r\n\t\tif ((FirebaseAuth.getInstance().getCurrentUser() !\u003d null)) {\r\n\t\t\t%3$s\r\n\t\t}\r\n\t\telse {\r\n\t\t\t%4$s\r\n\t\t}","name":"CheckUserLoginOrNot","palette":"28","type":"e","spec":"CheckUser for %m.FirebaseUser and %m.FirebaseAuth ifLogin"},{"code":"%1$s.getPhotoUrl().toString()","name":"UrlImageProfile","typeName":"String","palette":"28","type":"v","spec":"%m.FirebaseUser getImageProfileURL"},{"code":"%1$s.getDisplayName()","name":"UsernameGoogleSign","typeName":"String","palette":"28","type":"v","spec":"%m.FirebaseUser getUsername"},{"code":"try {\n                // Google Sign In was successful, authenticate with Firebase\n                GoogleSignInAccount account \u003d %1$s.getResult(ApiException.class);\n                \n                firebaseAuthWithGoogle(account.getIdToken());\n            } catch (ApiException e) {\n                //On Fiailure\n                final String ErrorOnResultSign \u003d e.getMessage();\n                %2$s\n            }","name":"OnActivityResultGoogleSign","palette":"28","type":"c","spec":"ActivityResultGoogleSign %m.GoogleSignInAccount IfError"},{"code":"ErrorOnResultSign","name":"ErrorOnResultSign","typeName":"String","palette":"28","type":"v","spec":"ErrorOnResultSign"},{"code":"%1$s \u003d new RecyclerView(%2$s.this);\n%1$s.setLayoutParams(new ViewGroup.LayoutParams( ViewGroup.LayoutParams.%3$S, ViewGroup.LayoutParams.%4$S));","name":"CreateRecyclerview","palette":"29","type":" ","spec":"%m.RecyclerView at %m.activity Width %s.inputOnly Height %s.inputOnly"},{"code":"%1$s","name":"RecyclerView","typeName":"RecyclerView","palette":"29","type":"v","spec":"%s.inputOnly RecyclerView"},{"code":"%1$s %2$s \u003d new %1$s(%4$s, %3$s.this);","name":"AdapterRecyclerView","palette":"29","type":" ","spec":"Adapter %s.inputOnly name %s.inputOnly at %m.activity dataList %m.list"},{"code":"%1$s.setAdapter(%2$s);","name":"RecyclerViewSetAdapter","palette":"29","type":" ","spec":"%m.RecyclerView setAdapterName %s.inputOnly"},{"code":"%1$s","name":"ListCustome","typeName":"List","palette":"29","type":"v","spec":"%s.inputOnly List"},{"code":"%1$s.setLayoutManager(new LinearLayoutManager(%2$s.this));","name":"RecyclerviewLayoutManager","palette":"29","type":" ","spec":"%m.RecyclerView LayoutManager at %m.activity"},{"code":"public class %1$s extends RecyclerView.Adapter\u003cRecyclerView.%2$s\u003e {\n    %3$s\n}","name":"ClassAdapterRecyclerView","palette":"29","type":"c","spec":"ClassRecyclerViewAdapter %s.inputOnly viewHolderName %s.inputOnly"},{"code":"private Context context;","name":"PrivateContext","palette":"29","type":" ","spec":"PrivateContext"},{"code":"private List\u003c%1$s\u003e %2$s;","name":"PrivateArrayList","palette":"29","type":" ","spec":"ArrayList fromClassList %s.inputOnly namaList %s.inputOnly"},{"code":"    public %1$s(Context context, List\u003c%2$s\u003e %3$s) {\n        this.%3$s \u003d %3$s;\n        this.context \u003d context;\n        %4$s\n    }","name":"AdapterSetData","palette":"29","type":"c","spec":"Adapter %s.inputOnly ClassList %s.inputOnly listName %s.inputOnly"},{"code":"    //ViewHolder Digunakan Untuk Menyimpan Referensi Dari View-View\n    public class %1$s extends RecyclerView.ViewHolder{\n\n        %2$s\n    }","name":"ClassViewHolder","palette":"29","type":"c","spec":"ClassViewHolder %s.inputOnly extendRecyclerViewHolder"},{"code":"private TextView %1$s;","name":"PrivateTextViewWidget","palette":"29","type":" ","spec":"PrivateTextView %s.inputOnly"},{"code":"private LinearLayout %1$s;","name":"PrivateLinearLayoutWidget","palette":"29","type":" ","spec":"PrivateLinearLayout %s.inputOnly"},{"code":"private ImageView %1$s;","name":"PrivateImageViewWidget","palette":"29","type":" ","spec":"PrivateImageView %s.inputOnly"},{"code":"        %1$s(View %2$s) {\n            super(%2$s);\n            %3$s\n        }","name":"ViewHolderItem","palette":"29","type":"c","spec":"ViewHolder %s.inputOnly View %s.inputOnly"},{"code":"        %1$s \u003d %2$s.findViewById(R.id.%1$s);","name":"findViewWidget","palette":"29","type":" ","spec":"findView %s.inputOnly atView %s.inputOnly"},{"code":"    @Override\n    public %1$s onCreateViewHolder(ViewGroup parent, int viewType) {\n        //Membuat View untuk Menyiapkan dan Memasang Layout yang Akan digunakan pada RecyclerView\n        View %2$s \u003d LayoutInflater.from(parent.getContext()).inflate(R.layout.%3$s, parent, false);\n        return new %1$s(%2$s);\n    }","name":"onCreateViewHolder","palette":"29","type":"c","spec":"ViewHolder %s.inputOnly View %s.inputOnly inflateLayout %s.inputOnly"},{"code":"    @Override\n    public void onBindViewHolder(%1$s %2$s, int position) {\n        %3$s\n    }","name":"onBindView","palette":"29","type":"c","spec":"onBindViewHolder ViewHolder %s.inputOnly nameViewHolder %s.inputOnly"},{"code":"position","name":"position","palette":"29","type":"d","spec":"position"},{"code":"%1$s.get%2$s()","name":"StringGetData","palette":"29","type":"s","spec":"ListName %s.inputOnly getKey %s.inputOnly"},{"code":"final String %1$s \u003d %2$s;","name":"finalString","palette":"29","type":" ","spec":"FinalStringName %s.inputOnly dataString %s"},{"code":"%1$s","name":"getString","typeName":"String","palette":"29","type":"v","spec":"StringName %s.inputOnly"},{"code":"%1$s.%2$s","name":"holderWidgetText","typeName":"TextView","palette":"29","type":"v","spec":"holderName %s.inputOnly TextView_ID %s.inputOnly"},{"code":"%1$s.%2$s","name":"holderWidgetImage","typeName":"ImageView","palette":"29","type":"v","spec":"holderName %s.inputOnly ImageView_ID %s.inputOnly"},{"code":"%1$s.%2$s","name":"holderLinearLayout","typeName":"LinearLayout","palette":"29","type":"v","spec":"holderName %s.inputOnly LinearLayout_ID %s.inputOnly"},{"code":"        %1$s.setOnLongClickListener(new View.OnLongClickListener() {\n            @Override\n            public boolean onLongClick(View v) {\n                \n                %2$s\n                return true;\n            }\n        });","name":"onLongClickItem","palette":"29","type":"c","spec":"onLongClickItem %m.View"},{"code":"    @Override\n    public int getItemCount() {\n        //Menghitung Ukuran/Jumlah Data Yang Akan Ditampilkan Pada RecyclerView\n        %1$s\n    }","name":"getItemCountRecyclerview","palette":"29","type":"c","spec":"getItemCount Recyclerview"},{"code":"        return %1$s.size();","name":"MaxSizeListData","palette":"29","type":" ","spec":"MaxSizeList %s.inputOnly"},{"code":"        return %1$s;","name":"CountListData","palette":"29","type":" ","spec":"CountList %d"},{"code":"public class %1$s {\n\n    %2$s\n}","name":"ClassModel","palette":"29","type":"c","spec":"RecyclerView ClassModel %s.inputOnly"},{"code":"    private String %1$s;","name":"privateStringModel","palette":"29","type":" ","spec":"StringName %s.inputOnly"},{"code":"    public String get%1$s() {\n        return %2$s;\n    }\n\n    public void set%1$s(String %2$s) {\n        this.%2$s \u003d %2$s;\n    }","name":"publicVoidString","palette":"29","type":" ","spec":"public String %s.inputOnly return %s.inputOnly"},{"code":"    public %1$s(){\n    }\n\n    //Konstruktor dengan beberapa parameter, untuk mendapatkan Input Data dari User\n    public %1$s(%2$s) {\n        %3$s\n    }","name":"getDataFirebase","palette":"29","type":"c","spec":"ClassModelName %s.inputOnly allString %s.inputOnly"},{"code":"        this.%1$s \u003d %1$s;","name":"indexStringNameDateFB","palette":"29","type":" ","spec":"IndexStringName %s.inputOnly"},{"code":"private CardView %1$s;","name":"PrivateCardView","palette":"29","type":" ","spec":"PrivateCardView %s.inputOnly"},{"code":"%1$s.setAdapter(new %1$SAdapter(%2$s));","name":"RecyclerViewAdapter","palette":"29","type":" ","spec":"RecyclerView %m.RecyclerView data %m.list"},{"code":"\t\n\t\t\n}\n\t\t\tpublic class Arc extends GraphicObject {\n\t\t\t\tprivate android.graphics.RectF oval;\n\t\t\t\tprivate float startAngle;\n\t\t\t\tprivate float sweepAngle;\n\t\t\t\tprivate boolean useCenter;\n\n\t\t\t\tpublic void setOval(android.graphics.RectF oval) {\n\t\t\t\t\tthis.oval \u003d oval;\n\t\t\t\t}\n\n\t\t\t\tpublic void setStartAngle(float startAngle) {\n\t\t\t\t\tthis.startAngle \u003d startAngle;\n\t\t\t\t}\n\n\t\t\t\tpublic void setSweepAngle(float sweepAngle) {\n\t\t\t\t\tthis.sweepAngle \u003d sweepAngle;\n\t\t\t\t}\n\n\t\t\t\tpublic void setUseCenter(boolean useCenter) {\n\t\t\t\t\tthis.useCenter \u003d useCenter;\n\t\t\t\t}\n\n\t\t\t\tpublic float getStartAngle() {\n\t\t\t\t\treturn startAngle;\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawArc(oval, startAngle, sweepAngle, useCenter, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic class Balloon extends LoaderView {\n\t\t\t\t@Override public void initializeObjects() {\n\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Circle extends GraphicObject {\n\t\t\t\tprivate PointF center;\n\t\t\t\tprivate float radius;\n\n\t\t\t\tpublic Circle() {\n\t\t\t\t\tcenter \u003d new PointF();\n\t\t\t\t}\n\n\t\t\t\tpublic void setRadius(float radius) {\n\t\t\t\t\tthis.radius \u003d radius;\n\t\t\t\t}\n\n\t\t\t\tpublic void setCenter(float x, float y) {\n\t\t\t\t\tcenter.set(x, y);\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawCircle(center.x, center.y, radius, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class ClassicSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int circlesSize;\n\n\t\t\t\tpublic ClassicSpinner() {\n\t\t\t\t\tcirclesSize \u003d 8;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[circlesSize];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setAlpha(126);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tcircles[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(45 * i, center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class FishSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int numberOfCircle;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic FishSpinner() {\n\t\t\t\t\tnumberOfCircle \u003d 5;\n\t\t\t\t\trotates \u003d new float[numberOfCircle];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[numberOfCircle];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * i / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1700);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 100);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic abstract class GraphicObject {\n\t\t\t\tprotected android.graphics.Paint paint;\n\n\t\t\t\tpublic GraphicObject() {\n\t\t\t\t\tpaint \u003d new android.graphics.Paint();\n\t\t\t\t\tpaint.setAntiAlias(true);\n\t\t\t\t}\n\n\t\t\t\tpublic void setColor(int color) {\n\t\t\t\t\tpaint.setColor(color);\n\t\t\t\t}\n\n\t\t\t\tpublic void setAlpha(int alpha) {\n\t\t\t\t\tpaint.setAlpha(alpha);\n\t\t\t\t}\n\n\t\t\t\tpublic void setWidth(float width) {\n\t\t\t\t\tpaint.setStrokeWidth(width);\n\t\t\t\t}\n\n\t\t\t\tpublic void setStyle(android.graphics.Paint.Style style) {\n\t\t\t\t\tpaint.setStyle(style);\n\t\t\t\t}\n\n\t\t\t\tpublic abstract void draw(android.graphics.Canvas canvas);\n\t\t\t}\n\n\n\t\t\tpublic interface InvalidateListener {\n\t\t\t\tvoid reDraw();\n\t\t\t}\n\n\t\t\tpublic class InvalidNumberOfPulseException extends Exception {\n\n\t\t\t\t@Override public String getMessage() {\n\t\t\t\t\treturn \"The number of pulse must be between 2 and 6\";\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Line extends GraphicObject {\n\t\t\t\tprivate PointF point1;\n\t\t\t\tprivate PointF point2;\n\n\t\t\t\tpublic void setPoint1(PointF point1) {\n\t\t\t\t\tthis.point1 \u003d point1;\n\t\t\t\t}\n\n\t\t\t\tpublic void setPoint2(PointF point2) {\n\t\t\t\t\tthis.point2 \u003d point2;\n\t\t\t\t}\n\n\t\t\t\tpublic PointF getPoint1() {\n\t\t\t\t\treturn point1;\n\t\t\t\t}\n\n\t\t\t\tpublic PointF getPoint2() {\n\t\t\t\t\treturn point2;\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawLine(point1.x, point1.y, point2.x, point2.y, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class LineSpinner extends LoaderView {\n\t\t\t\tprivate Line[] lines;\n\t\t\t\tprivate int numberOfLine;\n\n\t\t\t\tpublic LineSpinner() {\n\t\t\t\t\tnumberOfLine \u003d 8;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tint size \u003d Math.min(width, height);\n\t\t\t\t\tfloat lineWidth \u003d size / 10f;\n\t\t\t\t\tlines \u003d new Line[numberOfLine];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tlines[i] \u003d new Line();\n\t\t\t\t\t\tlines[i].setColor(color);\n\t\t\t\t\t\tlines[i].setAlpha(126);\n\t\t\t\t\t\tlines[i].setWidth(lineWidth);\n\t\t\t\t\t\tlines[i].setPoint1(new PointF(center.x, center.y - size / 2f + lineWidth));\n\t\t\t\t\t\tlines[i].setPoint2(new PointF(center.x, lines[i].getPoint1().y + 2 * lineWidth));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tlines[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(45 * i, center.x, center.y);\n\t\t\t\t\t\tlines[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class PhoneWave extends LoaderView {\n\t\t\t\tprivate Arc[] arcs;\n\t\t\t\tprivate int numberOfArc;\n\n\t\t\t\tpublic PhoneWave() {\n\t\t\t\t\tnumberOfArc \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\tarcs \u003d new Arc[numberOfArc];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfloat d \u003d r / 4 + i * r / 4;\n\t\t\t\t\t\tarcs[i] \u003d new Arc();\n\t\t\t\t\t\tarcs[i].setColor(color);\n\t\t\t\t\t\tarcs[i].setAlpha(126);\n\t\t\t\t\t\tarcs[i].setOval(new android.graphics.RectF(center.x - d, center.y - d + r / 3, center.x + d, center.y + d + r / 3));\n\t\t\t\t\t\tarcs[i].setStartAngle(225);\n\t\t\t\t\t\tarcs[i].setSweepAngle(90);\n\t\t\t\t\t\tarcs[i].setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\t\tarcs[i].setWidth(r / 10f);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(i * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tarcs[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tarcs[i].draw(canvas);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Pulse extends LoaderView {\n\t\t\t\tprivate Line[] lines;\n\t\t\t\tprivate int numberOfLines;\n\t\t\t\tprivate float lineWidth;\n\t\t\t\tprivate float lineDistance;\n\t\t\t\tprivate float[] scaleY;\n\n\t\t\t\tpublic Pulse(int numberOfLines) throws InvalidNumberOfPulseException {\n\t\t\t\t\tif (numberOfLines \u003c 3 || numberOfLines \u003e 5) {\n\t\t\t\t\t\tthrow new InvalidNumberOfPulseException();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.numberOfLines \u003d numberOfLines;\n\t\t\t\t\tlines \u003d new Line[numberOfLines];\n\t\t\t\t\tscaleY \u003d new float[numberOfLines];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tlineWidth \u003d width / (2 * numberOfLines);\n\t\t\t\t\tlineDistance \u003d lineWidth / 4f;\n\t\t\t\t\tfloat firstX \u003d (width - (lineWidth * numberOfLines + lineDistance * (numberOfLines - 1))) / 2f + lineWidth / 2f;\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tlines[i] \u003d new Line();\n\t\t\t\t\t\tlines[i].setColor(color);\n\t\t\t\t\t\tlines[i].setWidth(lineWidth);\n\t\t\t\t\t\tlines[i].setPoint1(new PointF(firstX, center.y - height / 4f));\n\t\t\t\t\t\tlines[i].setPoint2(new PointF(firstX, center.y + height / 4f));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\t\t\t\t\t\tandroid.animation.ValueAnimator scaleAnimator \u003d android.animation.ValueAnimator.ofFloat(1f, 1.5f, 1f);\n\t\t\t\t\t\tscaleAnimator.setDuration(1000);\n\t\t\t\t\t\tscaleAnimator.setStartDelay(i * 120);\n\t\t\t\t\t\tscaleAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tscaleAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tscaleY[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tscaleAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.translate(i * (lineWidth + lineDistance), 0);\n\t\t\t\t\t\tcanvas.scale(1, scaleY[i], lines[i].getPoint1().x, center.y);\n\t\t\t\t\t\tlines[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Radar extends LoaderView {\n\t\t\t\tprivate Line line;\n\t\t\t\tprivate float degree;\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tline \u003d new Line();\n\t\t\t\t\tline.setPoint1(center);\n\t\t\t\t\tline.setPoint2(new PointF(0, size / 2f));\n\t\t\t\t\tline.setColor(color);\n\t\t\t\t\tline.setWidth(5);\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tandroid.animation.ValueAnimator animator \u003d android.animation.ValueAnimator.ofFloat(0, 359);\n\t\t\t\t\tanimator.setDuration(1000);\n\t\t\t\t\tanimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\tanimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\tdegree \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tanimator.start();\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.save();\n\t\t\t\t\tcanvas.rotate(degree, center.x, center.y);\n\t\t\t\t\tline.draw(canvas);\n\t\t\t\t\tcanvas.restore();\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Sharingan extends LoaderView {\n\t\t\t\tprivate Circle eye;\n\t\t\t\tprivate Circle eyeBound;\n\t\t\t\tprivate Circle[] sharingans;\n\t\t\t\tprivate int numberOfSharingan;\n\t\t\t\tprivate float rotate;\n\t\t\t\tprivate float scale;\n\t\t\t\tprivate float eyeBoundRadius;\n\t\t\t\tprivate float eyeBoundRadiusScale;\n\n\t\t\t\tpublic Sharingan() {\n\t\t\t\t\tnumberOfSharingan \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\teyeBoundRadius \u003d r / 1.5f;\n\n\t\t\t\t\teye \u003d new Circle();\n\t\t\t\t\teye.setCenter(center.x, center.y);\n\t\t\t\t\teye.setColor(color);\n\t\t\t\t\teye.setRadius(r / 4);\n\n\t\t\t\t\teyeBound \u003d new Circle();\n\t\t\t\t\teyeBound.setCenter(center.x, center.y);\n\t\t\t\t\teyeBound.setColor(color);\n\t\t\t\t\teyeBound.setRadius(eyeBoundRadius);\n\t\t\t\t\teyeBound.setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\teyeBound.setWidth(r / 20f);\n\n\t\t\t\t\tsharingans \u003d new Circle[numberOfSharingan];\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfSharingan; i++) {\n\t\t\t\t\t\tsharingans[i] \u003d new Circle();\n\t\t\t\t\t\tsharingans[i].setCenter(center.x, center.y - eyeBoundRadius);\n\t\t\t\t\t\tsharingans[i].setColor(color);\n\t\t\t\t\t\tsharingans[i].setRadius(r / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tandroid.animation.ValueAnimator rotateAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\trotateAnimator.setDuration(1500);\n\t\t\t\t\trotateAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\trotateAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\trotate \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tandroid.animation.ValueAnimator scaleAnimator \u003d android.animation.ValueAnimator.ofFloat(1f, 0.8f, 1f);\n\t\t\t\t\tscaleAnimator.setDuration(1000);\n\t\t\t\t\tscaleAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\tscaleAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\tscale \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tandroid.animation.AnimatorSet animatorSet \u003d new android.animation.AnimatorSet();\n\t\t\t\t\tanimatorSet.play(rotateAnimator).with(scaleAnimator);\n\t\t\t\t\tanimatorSet.start();\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.save();\n\t\t\t\t\tcanvas.scale(scale, scale, center.x, center.y);\n\t\t\t\t\tcanvas.rotate(rotate, center.x, center.y);\n\t\t\t\t\teye.draw(canvas);\n\t\t\t\t\teyeBound.draw(canvas);\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfSharingan; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(i * 120, center.x, center.y);\n\t\t\t\t\t\tsharingans[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t\tcanvas.restore();\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class TwinFishesSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int numberOfCircle;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic TwinFishesSpinner() {\n\t\t\t\t\tnumberOfCircle \u003d 10;\n\t\t\t\t\trotates \u003d new float[numberOfCircle];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[numberOfCircle];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle / 2; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * i / 6);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (int i \u003d numberOfCircle / 2; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, size - circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * (i - 5) / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1700);\n\t\t\t\t\t\tfadeAnimator.setStartDelay((index \u003e\u003d 5 ? index - 5 : index) * 100);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Whirlpool extends LoaderView {\n\t\t\t\tprivate Arc[] arcs;\n\t\t\t\tprivate int numberOfArc;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic Whirlpool() {\n\t\t\t\t\tnumberOfArc \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\tarcs \u003d new Arc[numberOfArc];\n\t\t\t\t\trotates \u003d new float[numberOfArc];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfloat d \u003d r / 4 + i * r / 4;\n\t\t\t\t\t\tarcs[i] \u003d new Arc();\n\t\t\t\t\t\tarcs[i].setColor(color);\n\t\t\t\t\t\tarcs[i].setOval(new android.graphics.RectF(center.x - d, center.y - d, center.x + d, center.y + d));\n\t\t\t\t\t\tarcs[i].setStartAngle(i * 45);\n\t\t\t\t\t\tarcs[i].setSweepAngle(i * 45 + 90);\n\t\t\t\t\t\tarcs[i].setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\t\tarcs[i].setWidth(r / 10f);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d numberOfArc - 1; i \u003e\u003d 0; i--) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(arcs[i].getStartAngle(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   arcs[i].getStartAngle() + 360* (i %2$s 2 \u003d\u003d 0 ? -1 : 1));\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration((i + 1) * 500);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tarcs[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic class Worm extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int circlesSize;\n\t\t\t\tprivate float radius;\n\t\t\t\tprivate int[] transformations;\n\n\t\t\t\tpublic Worm() {\n\t\t\t\t\tcirclesSize \u003d 5;\n\t\t\t\t\ttransformations \u003d new int[]{-2, -1, 0, 1, 2};\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tcircles \u003d new Circle[circlesSize];\n\t\t\t\t\tradius \u003d width / 10f - width / 100f;\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(radius);\n\t\t\t\t\t\tcircles[i].setCenter(center.x, center.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\t\t\t\t\t\tandroid.animation.ValueAnimator translateAnimator \u003d android.animation.ValueAnimator.ofFloat(center.y, height / 4f, height * 3 / 4f, center.y);\n\t\t\t\t\t\ttranslateAnimator.setDuration(1000);\n\t\t\t\t\t\ttranslateAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\ttranslateAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\ttranslateAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tcircles[index].setCenter(center.x, (float)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\ttranslateAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.translate(2 * radius * transformations[i], 0);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic abstract class LoaderView {\n\t\t\t\tprotected int color;\n\t\t\t\tprotected int width, height;\n\t\t\t\tprotected int desiredWidth, desiredHeight;\n\t\t\t\tprotected PointF center;\n\t\t\t\tprotected InvalidateListener invalidateListener;\n\n\t\t\t\tpublic LoaderView() {\n\t\t\t\t\tthis.desiredWidth \u003d 150;\n\t\t\t\t\tthis.desiredHeight \u003d 150;\n\t\t\t\t}\n\n\t\t\t\tpublic void setColor(int color) {\n\t\t\t\t\tthis.color \u003d color;\n\t\t\t\t}\n\n\t\t\t\tpublic void setSize(int width, int height) {\n\t\t\t\t\tthis.width \u003d width;\n\t\t\t\t\tthis.height \u003d height;\n\t\t\t\t\tthis.center \u003d new PointF(width / 2.0f, height / 2.0f);\n\t\t\t\t}\n\n\t\t\t\tpublic void setInvalidateListener(InvalidateListener invalidateListener) {\n\t\t\t\t\tthis.invalidateListener \u003d invalidateListener;\n\t\t\t\t}\n\n\t\t\t\tpublic int getDesiredWidth() {\n\t\t\t\t\treturn desiredWidth;\n\t\t\t\t}\n\n\t\t\t\tpublic int getDesiredHeight() {\n\t\t\t\t\treturn desiredHeight;\n\t\t\t\t}\n\n\t\t\t\tpublic abstract void initializeObjects();\n\n\t\t\t\tpublic abstract void setUpAnimation();\n\n\t\t\t\tpublic abstract void draw(android.graphics.Canvas canvas);\n\n\t\t\t\tpublic boolean isDetached() {\n\t\t\t\t\treturn invalidateListener \u003d\u003d null;\n\t\t\t\t}\n\n\t\t\t\tpublic void onDetach() {\n\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\tinvalidateListener \u003d null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic static class LoaderGenerator {\n\t\t\t\tpublic static LoaderView generateLoaderView(int type) {\n\t\t\t\t\t%1$s aan \u003d new %1$s();\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\treturn aan.new FishSpinner();\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\treturn aan.new LineSpinner();\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(3);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(4);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 5:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(5);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\t\treturn aan.new Radar();\n\t\t\t\t\t\tcase 7:\n\t\t\t\t\t\t\treturn aan.new TwinFishesSpinner();\n\t\t\t\t\t\tcase 8:\n\t\t\t\t\t\t\treturn aan.new Worm();\n\t\t\t\t\t\tcase 9:\n\t\t\t\t\t\t\treturn aan.new Whirlpool();\n\t\t\t\t\t\tcase 10:\n\t\t\t\t\t\t\treturn aan.new PhoneWave();\n\t\t\t\t\t\tcase 11:\n\t\t\t\t\t\t\treturn aan.new Sharingan();\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpublic static LoaderView generateLoaderView(String type) {\n\t\t\t\t\t%1$s aan \u003d new %1$s();\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase \"ClassicSpinner\":\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t\tcase \"FishSpinner\":\n\t\t\t\t\t\t\treturn aan.new FishSpinner();\n\t\t\t\t\t\tcase \"LineSpinner\":\n\t\t\t\t\t\t\treturn aan.new LineSpinner();\n\t\t\t\t\t\tcase \"ThreePulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(3);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"FourPulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(4);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"FivePulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(5);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"Radar\":\n\t\t\t\t\t\t\treturn aan.new Radar();\n\t\t\t\t\t\tcase \"TwinFishesSpinner\":\n\t\t\t\t\t\t\treturn aan.new TwinFishesSpinner();\n\t\t\t\t\t\tcase \"Worm\":\n\t\t\t\t\t\t\treturn aan.new Worm();\n\t\t\t\t\t\tcase \"Whirlpool\":\n\t\t\t\t\t\t\treturn aan.new Whirlpool();\n\t\t\t\t\t\tcase \"PhoneWave\":\n\t\t\t\t\t\t\treturn aan.new PhoneWave();\n\t\t\t\t\t\tcase \"Sharingan\":\n\t\t\t\t\t\t\treturn aan.new Sharingan();\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class MKLoader extends View implements InvalidateListener {\n\t\t\t\tprivate int setLoaderType;\n\t\t\t\tprivate int setLoaderColor;\n\t\t\t\tprivate LoaderView loaderView;\n\n\t\t\t\tpublic MKLoader(Context context) {\n\t\t\t\t\tsuper(context);\n\t\t\t\t\tinitialize(context, null, 0);\n\t\t\t\t}\n\n\t\t\t\tpublic MKLoader(Context context, android.util.AttributeSet attrs) {\n\t\t\t\t\tsuper(context, attrs);\n\t\t\t\t\tinitialize(context, attrs, 0);\n\t\t\t\t}\n\n\t\t\t\tpublic MKLoader(Context context, android.util.AttributeSet attrs, int defStyleAttr) {\n\t\t\t\t\tsuper(context, attrs, defStyleAttr);\n\t\t\t\t\tinitialize(context, attrs, defStyleAttr);\n\t\t\t\t}\n\n\t\t\t\tprivate void initialize(Context context, android.util.AttributeSet attrs, int defStyleAttr) {\n\t\t\t\t\t//TypedArray typedArray \u003d context.obtainStyledAttributes(attrs, R.styleable.MKLoader);\n\t\t\t\t\t//int loaderType \u003d typedArray.getInt(R.styleable.MKLoader_mk_type,-1);\n\t\t\t\t\t//int loaderType \u003d -1;\n\t\t\t\t\t//loaderView \u003d LoaderGenerator.generateLoaderView(setLoaderType);\n\t\t\t\t\t//loaderView.setColor(Color.parseColor(\"#ffffff\"));\n\t\t\t\t\t//loaderView.setColor(typedArray.getColor(R.styleable.MKLoader_mk_color, Color.parseColor(\"#ffffff\")));\n\t\t\t\t\t//typedArray.recycle();\n\t\t\t\t}\n\n\t\t\t\tpublic void setType(int _type) {\n\t\t\t\t\tthis.setLoaderType \u003d _type;\n\t\t\t\t\tloaderView \u003d LoaderGenerator.generateLoaderView(setLoaderType);\n\t\t\t\t}\n\t\t\t\tpublic void setColor(int _color) {\n\t\t\t\t\tthis.setLoaderColor \u003d _color;\n\t\t\t\t\tloaderView.setColor(setLoaderColor);\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\t\t\t\t\tfinal int measuredWidth \u003d resolveSize(loaderView.getDesiredWidth(), widthMeasureSpec);\n\t\t\t\t\tfinal int measuredHeight \u003d resolveSize(loaderView.getDesiredHeight(), heightMeasureSpec);\n\n\t\t\t\t\tsetMeasuredDimension(measuredWidth, measuredHeight);\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n\t\t\t\t\tsuper.onLayout(changed, left, top, right, bottom);\n\t\t\t\t\tloaderView.setSize(getWidth(), getHeight());\n\t\t\t\t\tloaderView.initializeObjects();\n\t\t\t\t\tloaderView.setUpAnimation();\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onDraw(android.graphics.Canvas canvas) {\n\t\t\t\t\tsuper.onDraw(canvas);\n\t\t\t\t\tloaderView.draw(canvas);\n\t\t\t\t}\n\n\t\t\t\t@Override public void reDraw() {\n\t\t\t\t\tinvalidate();\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onAttachedToWindow() {\n\t\t\t\t\tsuper.onAttachedToWindow();\n\t\t\t\t\tif (loaderView !\u003d null \u0026\u0026 loaderView.isDetached()) {\n\t\t\t\t\t\tloaderView.setInvalidateListener(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onDetachedFromWindow() {\n\t\t\t\t\tsuper.onDetachedFromWindow();\n\t\t\t\t\tif (loaderView !\u003d null) {\n\t\t\t\t\t\tloaderView.onDetach();\n\t\t\t\t\t}\n\t\t\t\t}","color":"#CAC319","name":"MKLoaderLibrary","typeName":"","palette":"31","type":" ","spec":"\u003e\u003e\u003e\u003e\u003e %m.activity % %s.inputOnly MKLoaderLibrary \u003c\u003c\u003c\u003c"},{"code":"{final MKLoader ag \u003d new MKLoader(%2$s.this);\nag.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT));\nag.setType(%3$s); //0-11\nag.setColor(%4$s);\n%1$s.addView(ag);}","color":"#CAC319","name":"addMKLoader","typeName":"","palette":"31","type":" ","spec":"%m.view addMKLoader %m.activity type(0-11) %d  color %m.color"},{"code":"}\npublic class AnimatedGradientTextView extends TextView {\n    GradientManager gradientManager;\n    public String fonts;\n    public int[] colors;\n    public int simul;\n    public int angle;\n    public int speed;\n    public int maxFPS;\n    public AnimatedGradientTextView(Context context) {\n        super(context);\n        gradientManager \u003d new GradientManager(this);\n    }\n    public AnimatedGradientTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        gradientManager \u003d new GradientManager(this, colors, simul, angle, speed, maxFPS);\n        CustomFontManager.applyFontFromAttrs(this, fonts);\n    }\n    public AnimatedGradientTextView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        gradientManager \u003d new GradientManager(this, colors, simul, angle, speed, maxFPS);\n        CustomFontManager.applyFontFromAttrs(this, fonts);\n    }\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        gradientManager.stopGradient();\n        gradientManager.startGradient();\n    }\n    @Override\n    protected void onVisibilityChanged(View changedView, int visibility) {\n        super.onVisibilityChanged(changedView, visibility);\n        if (visibility \u003d\u003d VISIBLE) {\n            if (getScaleX() !\u003d 0 \u0026\u0026 getScaleY() !\u003d 0) {\n                gradientManager.startGradient();\n            }\n        } else {\n            gradientManager.stopGradient();\n        }\n    }\n    @Override\n    protected void onWindowVisibilityChanged(int visibility) {\n        super.onWindowVisibilityChanged(visibility);\n        if (visibility \u003d\u003d VISIBLE) {\n            if (getScaleX() !\u003d 0 \u0026\u0026 getScaleY() !\u003d 0) {\n                gradientManager.startGradient();\n            }\n        } else {\n            gradientManager.stopGradient();\n        }\n    }\n    @Override\n    public void onScreenStateChanged(int screenState) {\n        super.onScreenStateChanged(screenState);\n        if (screenState \u003d\u003d SCREEN_STATE_OFF) {\n            gradientManager.stopGradient();\n        } else if (screenState \u003d\u003d SCREEN_STATE_ON) {\n            gradientManager.startGradient();\n        }\n    }\n    public void setFonts(String _font) {\n    \tfonts \u003d _font;\n    \tCustomFontManager.applyFontFromAttrs(this, _font);\n    }\n    public void setColorGradients(int[] _color) {\n    \tcolors \u003d _color;\n    \tgradientManager.setColors(_color);\n    }\n    public void setSimultaneousColors(int _sim) {\n    \tsimul \u003d _sim;\n    \tgradientManager.setSimultaneousColors(_sim);\n    }\n    public void setAngle(int _ang) {\n    \tangle \u003d _ang;\n    \tgradientManager.setAngle(_ang);\n    }\n    public void setSpeed(int _spd) {\n    \tspeed \u003d _spd;\n    \tgradientManager.setSpeed(_spd);\n    }\n    public void setMaxFPS(int _fps) {\n    \tmaxFPS \u003d _fps;\n    \tgradientManager.setMaxFPS(_fps);\n    }\n}\n\n\npublic static class CustomFontManager {\n    private static final String FONT_FILE_NAME \u003d \"fonts/\";\n    public static String fonts \u003d \"\";\n    private CustomFontManager() {\n\n    }\n    public static void applyFontFromAttrs(TextView textView, String _fonts) {\n        String fontName \u003d _fonts;\n        if(fontName !\u003d null) {\n            Typeface font \u003d Typeface.createFromAsset(textView.getContext().getAssets(), FONT_FILE_NAME + fontName);\n            textView.setTypeface(font);\n        }\n    }\n    public static void setFonts(String _font) {\n    \tfonts \u003d _font;\n    }\n}\n\n\npublic static class GradientManager {\n    private final TextView textView;\n    public static int[] colors \u003d new int[]{Color.BLUE, Color.RED, Color.GREEN};\n    public static int simultaneousColors \u003d 2;\n    public static int angle \u003d 45;\n    public static int speed \u003d 1000;\n    public static int maxFPS \u003d 24;\n    public static int drawTimeInterval;\n    private GradientRunnable runnable;\n    private java.util.concurrent.ScheduledFuture\u003c?\u003e scheduledFuture \u003d null;\n    private long currentGradientProgress \u003d 0;\n    private static final int ATTR_NOT_FOUND \u003d Integer.MIN_VALUE;\n    public GradientManager(TextView textView) {\n        this.textView \u003d textView;\n        this.initDefaultValues();\n    }\n    public GradientManager(TextView textView, int[] _colors, int _simul, int _angle, int _speed, int _maxFPS) {\n        this.textView \u003d textView;\n        this.initFromAttrsValues(_colors, _simul, _angle, _speed, _maxFPS);\n    }\n    @SuppressWarnings(\"ResourceType\")\n    private void initFromAttrsValues(int[] _colors, int _simul, int _angle, int _speed, int _maxFPS) {\n    \tcolors \u003d _colors;\n        simultaneousColors \u003d _simul;\n        angle \u003d _angle;\n        speed \u003d _speed;\n        maxFPS \u003d _maxFPS;\n        drawTimeInterval \u003d 1000 / maxFPS;\n    }\n    private void initDefaultValues() {\n        colors \u003d colors;\n        simultaneousColors \u003d simultaneousColors;\n        angle \u003d angle;\n        speed \u003d speed;\n        maxFPS \u003d maxFPS;\n        drawTimeInterval \u003d 1000 / maxFPS;\n    }\n    public void stopGradient() {\n        synchronized (this) {\n            if (scheduledFuture !\u003d null) {\n                currentGradientProgress \u003d runnable.getCurrentProgress();\n                scheduledFuture.cancel(true);\n                runnable \u003d null;\n                scheduledFuture \u003d null;\n            }\n        }\n    }\n    public void startGradient() {\n        synchronized (this) {\n            if (scheduledFuture !\u003d null) {\n                return;\n            }\n            final int wf \u003d textView.getWidth();\n            final int hf \u003d textView.getHeight();\n            if (wf \u003e 0 \u0026\u0026 hf \u003e 0) {\n                runnable \u003d new GradientRunnable(textView, colors, simultaneousColors, angle, speed);\n                runnable.setCurrentProgress(currentGradientProgress);\n                java.util.concurrent.ScheduledExecutorService scheduledExecutor \u003d java.util.concurrent.Executors.newSingleThreadScheduledExecutor();\n                scheduledFuture \u003d scheduledExecutor.scheduleAtFixedRate(runnable, 0, drawTimeInterval, java.util.concurrent.TimeUnit.MILLISECONDS);\n            }\n        }\n    }\n    public static void setColors(int[] _col) {\n    \tcolors \u003d _col;\n    }\n    public static void setSimultaneousColors(int _sim) {\n    \tsimultaneousColors \u003d _sim;\n    }\n    public static void setAngle(int _ang) {\n    \tangle \u003d _ang;\n    }\n    public static void setSpeed(int _spd) {\n    \tspeed \u003d _spd;\n    }\n    public static void setMaxFPS(int _fps) {\n    \tmaxFPS \u003d _fps;\n    }\n}\n\n\npublic static class GradientRunnable implements Runnable {\n    private final TextView textView;\n    private int[] colors;\n    private int angle;\n    private int speed;\n    private long totalDelta \u003d 0;\n    private long lastTime \u003d 0;\n    private int[] currentColors;\n    private Point[] gradientsPositions;\n    private int currentGradient \u003d 0;\n    GradientRunnable(TextView textView, int[] colors, int simultaneousColors, int angle, int speed) {\n        this.textView \u003d textView;\n        this.colors \u003d colors;\n        this.angle \u003d angle;\n        this.speed \u003d speed;\n        final int wf \u003d textView.getWidth();\n        final int hf \u003d textView.getHeight();\n        gradientsPositions \u003d getGradientsPoints(wf, hf);\n        currentColors \u003d Arrays.copyOf(colors, simultaneousColors);\n    }\n    @Override\n    public void run() {\n        long currentTime \u003d SystemClock.uptimeMillis();\n        long delta \u003d currentTime - lastTime;\n        totalDelta +\u003d delta;\n        float totalPercentage \u003d totalDelta / ((float) speed);\n        totalPercentage \u003d totalPercentage \u003e 1 ? 1 : totalPercentage;\n        for (int colorIndex \u003d 0; colorIndex \u003c currentColors.length; colorIndex++) {\n            currentColors[colorIndex] \u003d (int) (new ArgbEvaluator().evaluate(totalPercentage, colors[(currentGradient + colorIndex) %1$s colors.length], colors[(currentGradient + (colorIndex + 1)) %1$s colors.length]));\n        }\n        if (totalPercentage \u003d\u003d 1) {\n            totalDelta \u003d 0;\n            currentGradient \u003d (currentGradient + 1) %1$s colors.length;\n        }\n        Shader shader \u003d new LinearGradient(gradientsPositions[0].x, gradientsPositions[0].y, gradientsPositions[1].x, gradientsPositions[1].y, currentColors, null, Shader.TileMode.CLAMP);\n        textView.getPaint().setShader(shader);\n        textView.postInvalidate();\n        lastTime \u003d currentTime;\n    }\n    private Point[] getGradientsPoints(int width, int height) {\n        double angleRadian \u003d Math.toRadians(angle);\n        int circleRadius \u003d width;\n        Point circleCenter \u003d new Point(width / 2, height / 2);\n        Point secantP1 \u003d new Point((int) (circleCenter.x - circleRadius * Math.cos(angleRadian)), (int) (circleCenter.y - circleRadius * Math.sin(angleRadian)));\n        Point secantP2 \u003d new Point((int) (circleCenter.x + circleRadius * Math.cos(angleRadian)), (int) (circleCenter.y + circleRadius * Math.sin(angleRadian)));\n        Point[] intersectPoints \u003d new Point[2];\n        Point topSegmentP1 \u003d new Point(0, 0);\n        Point topSegmentP2 \u003d new Point(width, 0);\n        intersectPoints[0] \u003d MathsUtils.getIntersectionPoint(secantP1, secantP2, topSegmentP1, topSegmentP2);\n        if (intersectPoints[0] \u003d\u003d null) {\n            Point leftSegmentP1 \u003d new Point(0, 0);\n            Point leftSegmentP2 \u003d new Point(0, height);\n            intersectPoints[0] \u003d MathsUtils.getIntersectionPoint(secantP1, secantP2, leftSegmentP1, leftSegmentP2);\n        }\n        Point bottomSegmentP1 \u003d new Point(0, height);\n        Point bottomSegmentP2 \u003d new Point(width, height);\n        intersectPoints[1] \u003d MathsUtils.getIntersectionPoint(secantP1, secantP2, bottomSegmentP1, bottomSegmentP2);\n        if (intersectPoints[1] \u003d\u003d null) {\n            Point rightSegmentP1 \u003d new Point(width, 0);\n            Point rightSegmentP2 \u003d new Point(width, height);\n            intersectPoints[1] \u003d MathsUtils.getIntersectionPoint(secantP1, secantP2, rightSegmentP1, rightSegmentP2);\n        }\n        return intersectPoints;\n    }\n    public long getCurrentProgress() {\n        return totalDelta;\n    }\n    public void setCurrentProgress(long progress) {\n        this.totalDelta \u003d progress;\n    }\n}\n\n\npublic static class MathsUtils {\n    private MathsUtils() {\n    }\n    static Point getIntersectionPoint(Point p1, Point p2, Point p3, Point p4) {\n        int d \u003d (p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x);\n        if (d \u003d\u003d 0) return null;\n        int x \u003d ((p3.x - p4.x) * (p1.x * p2.y - p1.y * p2.x) - (p1.x - p2.x) * (p3.x * p4.y - p3.y * p4.x)) / d;\n        int y \u003d ((p3.y - p4.y) * (p1.x * p2.y - p1.y * p2.x) - (p1.y - p2.y) * (p3.x * p4.y - p3.y * p4.x)) / d;\n        return new Point(x, y);\n    }","color":"#CAC319","name":"AnimatedGradientTextViewLibrary","typeName":"","palette":"31","type":" ","spec":"\u003e\u003e\u003e\u003e AnimatedGradientTextView Library % %s.inputOnly \u003c\u003c\u003c\u003c"},{"code":"%s","color":"#CAC319","name":"AnimatedGradientTextViewType","typeName":"AnimatedGradientTextView","palette":"31","type":"p","spec":"AGTV  %s.inputOnly"},{"code":"final AnimatedGradientTextView %1$s \u003d new AnimatedGradientTextView(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT));","color":"#CAC319","name":"AnimatedGradientTextViewCreate","typeName":"AnimatedGradientTextView","palette":"31","type":" ","spec":"%s.inputOnly AnimatedGradientTextView Create %m.activity"},{"code":"%s.setText(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetText","typeName":"AnimatedGradientTextView","palette":"31","type":" ","spec":"%m.AnimatedGradientTextView setText %s"},{"code":"%s.setTextSize(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetTextSize","typeName":"AnimatedGradientTextView","palette":"31","type":" ","spec":"%m.AnimatedGradientTextView setTextSize %d"},{"code":"%s.setFonts(\"fonts/%s.ttf\");","color":"#CAC319","name":"AnimatedGradientTextViewSetFonts","typeName":"AnimatedGradientTextView","palette":"31","type":" ","spec":"%m.AnimatedGradientTextView setFonts %m.font"},{"code":"%s.setColorGradients(new int[]{%s});","color":"#CAC319","name":"AnimatedGradientTextViewSetColorGradients","typeName":"AnimatedGradientTextView","palette":"31","type":" ","spec":"%m.AnimatedGradientTextView setColorGradients %m.color"},{"code":"%s.setSimultaneousColors(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetSimultaneousColors","typeName":"AnimatedGradientTextView","palette":"31","type":" ","spec":"%m.AnimatedGradientTextView setSimultaneousColors %d"},{"code":"%s.setAngle(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetAngle","typeName":"AnimatedGradientTextView","palette":"31","type":" ","spec":"%m.AnimatedGradientTextView  setAngle %d"},{"code":"%s.setSpeed(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetSpeed","typeName":"AnimatedGradientTextView","palette":"31","type":" ","spec":"%m.AnimatedGradientTextView  setSpeed %d ms"},{"code":"%s.setMaxFPS(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetMaxFPS","typeName":"AnimatedGradientTextView","palette":"31","type":" ","spec":"%m.AnimatedGradientTextView  setMaxFPS %d"},{"code":"%s.addView(%s);","color":"#CAC319","name":"AnimatedGradientTextViewAddView","typeName":"AnimatedGradientTextView","palette":"31","type":" ","spec":"%m.view addView %m.AnimatedGradientTextView"},{"code":"%s ,%s","color":"#e92467","name":"color with color","typeName":"color","palette":"31","type":"p","spec":"%m.color with %m.color"},{"code":"final androidx.viewpager.widget.ViewPager %1$s \u003d new androidx.viewpager.widget.ViewPager(this);\r\n%1$s.setLayoutParams(new ViewGroup.LayoutParams( ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));\n//code downloaded from FutureStore","name":"add ViewPager on Layout","palette":"30","type":" ","spec":"Add ViewPager on this Activity%m.ViewPager"},{"code":"%1$s.setBackgroundColor(%2$s);","name":"setPage Background Color","palette":"30","type":" ","spec":"%m.ViewPager Linear SetBackground Color%m.color"},{"code":"MyPagerAdapter adapter \u003d new MyPagerAdapter();\r\n%2$s.setAdapter(adapter);\r\n%2$s.setCurrentItem(%1$s);","name":"setOnStart Position","palette":"30","type":" ","spec":"setOnStart Position%d on%m.ViewPager"},{"code":"%1$s.addView(%2$s);","name":"linear for viewpager","palette":"30","type":" ","spec":"%m.view Linear for viewPager%m.ViewPager"},{"code":"%1$s.addOnPageChangeListener(new androidx.viewpager.widget.ViewPager.OnPageChangeListener() { public void onPageSelected(int position) { \r\nView noview \u003d (View) %1$s.findViewWithTag(\"%2$s\" + %1$s.getCurrentItem());","name":"get Current Position","palette":"30","type":" ","spec":"%m.ViewPager getCurrentPosition with TAG%s.inputOnly"},{"code":"position \u003d\u003d %1$s","name":"Position to change small image/text","palette":"30","type":"b","spec":"if Position \u003d %d"},{"code":"_%1$s();","name":"if moreBlock than","palette":"30","type":" ","spec":"if more blook than add it %s.inputOnly"},{"code":"}\r\n@Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) { }\r\n@Override public void onPageScrollStateChanged(int state) { }\r\n});\r\n}\r\nprivate class MyPagerAdapter extends androidx.viewpager.widget.PagerAdapter {\r\npublic int getCount() {\r\nreturn %1$s;\r\n}\r\npublic Object instantiateItem(View collection, int position) {\r\nLayoutInflater inflater \u003d (LayoutInflater) collection.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);\r\nint resId \u003d 0;\nswitch (position) {","name":"total ViewPager custom.xml","palette":"30","type":" ","spec":"total ViewPager customView %d"},{"code":"case %1$s:\r\nresId \u003d R.layout.%2$s;\r\nbreak;","name":"initiate CustomViews","palette":"30","type":" ","spec":"when View position \u003d%d setCustomView find by id%s.inputOnly"},{"code":"}\r\nView view \u003d inflater.inflate(resId, null);\r\n((androidx.viewpager.widget.ViewPager)collection).addView(view, 0);\r\nview.setTag(\"%1$s\" + position);\r\nreturn view;\r\n}\r\n@Override\r\npublic void destroyItem(View arg0, int arg1, Object arg2) {\r\n((androidx.viewpager.widget.ViewPager) arg0).removeView((View) arg2);\r\n}\r\n@Override\r\npublic boolean isViewFromObject(View arg0, Object arg1) {\r\nreturn arg0 \u003d\u003d ((View) arg1);\r\n}\r\n@Override\r\npublic Parcelable saveState() {\r\nreturn null;\r\n}\r\n//code by Debjit Baishnab","name":"ending block of viewPager","palette":"30","type":" ","spec":"add TAG (same)%s.inputOnly "},{"code":"%1$s.setType(%2$s);","name":"Intent setType","palette":"32","type":" ","spec":"%m.intent setType%s"},{"code":"%1$s.hasExtra(%2$s)","name":"Intent hasExtra","palette":"32","type":"b","spec":"%m.intent hasExtra%s"},{"code":"Intent.%s","name":"Intent extraString","palette":"32","type":"s","spec":"getIntentExtra %m.IntentExtra"},{"code":"Context %1$s \u003d this.getApplicationContext();","name":"Context","palette":"33","type":" ","spec":"Context %s.inputOnly init"},{"code":"%1$s \u003d getApplicationContext().getPackageName();","name":"PackageName","palette":"33","type":" ","spec":"getPackageNameApp toString %m.String"},{"code":"try {\n  final android.content.pm.PackageInfo info \u003d context.getPackageManager()\n          .getPackageInfo(%1$s, android.content.pm.PackageManager.GET_SIGNATURES);\n\n  for (android.content.pm.Signature signature : info.signatures) {\n     final java.security.MessageDigest md \u003d java.security.MessageDigest.getInstance(%2$S);\n      md.update(signature.toByteArray());\n\n      final byte[] digest \u003d md.digest();\n      final StringBuilder toRet \u003d new StringBuilder();\n      for (int i \u003d 0; i \u003c digest.length; i++) {\n          if (i !\u003d 0) toRet.append(\":\");\n          int b \u003d digest[i] \u0026 0xff;\n          String hex \u003d Integer.toHexString(b);\n          if (hex.length() \u003d\u003d 1) toRet.append(\"0\");\n          toRet.append(hex);\n      }          \n      String MD5app \u003d toRet.toString();\n      %3$s\n  }\n} catch (android.content.pm.PackageManager.NameNotFoundException e1) {\n      Log.e(\"name not found\", e1.toString());\n} catch (java.security.NoSuchAlgorithmException e) {\n      Log.e(\"no such an algorithm\", e.toString());\n} catch (Exception e) {\n      Log.e(\"exception\", e.toString());\n}\n            ","name":"getMD5Cert","palette":"33","type":"c","spec":"getMD5Cert AppID %s withKey %s"},{"code":"MD5app","name":"MD5app","typeName":"String","palette":"33","type":"v","spec":"MD5app"},{"code":"String[] IndoDev \u003d new String[] {","name":"Create autocompletetextview","palette":"34","type":" ","spec":"Create autocompletetextview1"},{"code":"%1$s,","name":"Add Item","palette":"34","type":" ","spec":"Add Item%s"},{"code":"};\n\nArrayAdapter\u003cString\u003e %1$s \u003d new ArrayAdapter\u003cString\u003e(this, android.R.layout.simple_dropdown_item_1line, IndoDev);","name":"Adapter ","palette":"34","type":" ","spec":"Adapter%s"},{"code":"%1$s.setAdapter(%1$s);","name":"AutoCompleteTextView","palette":"34","type":" ","spec":"%m.AutoCompleteTextView Set adapter%s"},{"code":"final int cx \u003d %1$s.getMeasuredWidth() / 2; final int cy \u003d %1$s.getMeasuredHeight() / 2;  final int finalRadius \u003d Math.max(%1$s.getWidth(), %1$s.getHeight()) / 2;\nfinal Animator anim \u003d  ViewAnimationUtils.createCircularReveal(%1$s, cx, cy, 0, finalRadius);  %1$s.setVisibility(View.VISIBLE);\nanim.start();","name":"Circuler Transection","palette":"35","type":" ","spec":"%m.view Convert this Linear As Circuler Translation When Revealed"},{"code":"LinearLayout viewgroup \u003d(LinearLayout) %1$s;\n\nandroid.transition.AutoTransition autoTransition \u003d new android.transition.AutoTransition(); autoTransition.setDuration((long)%2$s); android.transition.TransitionManager.beginDelayedTransition(viewgroup, autoTransition);","name":"translation Effect","palette":"35","type":" ","spec":"%m.view active Translation Effect for Duration%d"},{"code":"%s.getMenu().add(%s);","name":"bnv addMenu","palette":"36","type":" ","spec":"%m.BottomNavigationView addMenu %s"},{"code":"%s.getMenu().add(%s).setIcon(R.drawable.%s);","name":"bnv addMenuWithIcon","palette":"36","type":" ","spec":"%m.BottomNavigationView addMenu %s withIcon %m.resource_bg"},{"code":"%s.setItemBackgroundResource(R.drawable.%s);","name":"bnv setItemBackgroundResource","palette":"36","type":" ","spec":"%m.BottomNavigationView setItemBackgroundResource %m.resource_bg"},{"code":"%s.setItemIconSize(%s);","name":"bnv setItemIconSize","palette":"36","type":" ","spec":"%m.BottomNavigationView setItemIconSize %d"},{"code":"%s.setSelectedItemId(%s);","name":"bnv setSelectedItemId","palette":"36","type":" ","spec":"%m.BottomNavigationView setSelectedItemId %d"},{"code":"if (_titleMenu.equals(\"%s\")) {\r\n\t%s\t\t\t\t\r\n}","name":"sendbroad","palette":"36","type":"c","spec":"On Item By Id %s.InputOnly Clicked"},{"code":"return true;","color":"#2196f3","name":"returntrue","palette":"36","type":" ","spec":"Bottom End Block"},{"code":"new Object(){\n\t\t\tpublic void start(){\n\t\t\t\tnew AsyncTaskEx().execute();\n\t\t\t}\n\t\t\tpublic void run(){\n\t\t\t\t%s\n\t\t\t}\n\t\t\tfinal class AsyncTaskEx extends AsyncTask\u003cVoid, Void, Void\u003e {\n\t\t\t\t@Override\n\t\t\t\tprotected Void doInBackground(Void... arg0) {\n\t\t\t\t\trun();\n\t\t\t\t\treturn null;}\n\t\t\t\t@Override\n\t\t\t\tprotected void onPostExecute(Void result) {\n\t\t\t\t\t%s\n\t\t\t\t\treturn ;}\n\t\t\t\t@Override\n\t\t\t\tprotected void onPreExecute() {\n\t\t\t\t\treturn ;}}}.start();","color":"#FF000000","name":"AsyncTaskVoid","typeName":"","palette":"23","type":"e","spec":"AsyncTask StartVoid \u003d\u003e Finish","spec2":""},{"code":"new Object(){\n\t\t\t private void setB64Image(ImageView iv265, String s274){\n\t\t\t\t try{\n\t\t\t\t byte[] decodedString \u003d android.util.Base64.decode(s274.replace(\" \",\"\").replace(\"\\n\",\"\"), android.util.Base64.DEFAULT);\n\t\t\t\t android.graphics.Bitmap decodedByte \u003d android.graphics.BitmapFactory.decodeByteArray(decodedString, 0, decodedString.length); \n\t\t\t\t iv265.setImageBitmap(decodedByte);\n\t\t\t\t }catch(Exception e72) {}\n\t\t\t }\n\t\t }.setB64Image(%s,%s);","color":"#FF000000","name":"setImageFromBase64String","typeName":"","palette":"23","type":" ","spec":"%m.imageview setBase64Image %s"},{"code":"windowManager \u003d (WindowManager) getSystemService(WINDOW_SERVICE); \nlayoutParams \u003d new WindowManager.LayoutParams();\n\nif (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.O) { \nlayoutParams.type \u003d WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY; \n} else { \nlayoutParams.type \u003d WindowManager.LayoutParams.TYPE_PHONE; \n}\n\n","color":"#FF000000","name":"onCreateFWTyp1","typeName":"","palette":"23","type":" ","spec":"addToOnCreateActivity_Set"},{"code":"new Object(){\n\tpublic String getScreenshotToB64() { try {\n\t\t\tView v1 \u003d getWindow().getDecorView().getRootView();\n\t\t\tv1.setDrawingCacheEnabled(true);\n\t\t\tjava.io.ByteArrayOutputStream baos \u003d new java.io.ByteArrayOutputStream();\n\t\t\tandroid.graphics.Bitmap bm \u003d android.graphics.Bitmap.createBitmap(v1.getDrawingCache()); \n\t\t\tv1.setDrawingCacheEnabled(false);\n\t\t\tbm.compress(android.graphics.Bitmap.CompressFormat.PNG, 100, baos);\n\t\t\tbyte[] imageBytes \u003d baos.toByteArray();\n\t\t\tString imageString \u003d android.util.Base64.encodeToString(imageBytes ,android.util.Base64.DEFAULT);\n\t\t\treturn imageString;\n\t\t}catch(Exception e){return \"\";}\n\t\n\t}\n\t}.getScreenshotToB64()","color":"#FF000000","name":"getScreenshotToB64","typeName":"","palette":"23","type":"s","spec":"getScreenshotToB64"},{"code":"Double tlr \u003d %s;\nDouble trr \u003d %s;\nDouble blr \u003d %s;\nDouble brr \u003d %s;\nandroid.graphics.drawable.GradientDrawable s \u003d new android.graphics.drawable.GradientDrawable();\ns.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);\ns.setCornerRadii(new float[] {tlr.floatValue(),tlr.floatValue(), trr.floatValue(),trr.floatValue(), blr.floatValue(),blr.floatValue(), brr.floatValue(),brr.floatValue()});\ns.setColor(Color.parseColor(%s));\n%s.setBackground();","color":"#FFF44336","name":"RoundMultyple","typeName":"","palette":"10","type":" ","spec":"RoundAnyBlok a%d b%d c%d d%d color%m.color view%m.view  "},{"code":"final StartAppAd rewardedVideo \u003d new StartAppAd(%1$s.this);","name":"RewardedVideoAd","palette":"37","type":" ","spec":"RewardedVideoAd%m.activity"},{"code":"rewardedVideo.setVideoListener(new VideoListener() {\n@Override\npublic void onVideoCompleted() {\n%1$s\n}\n});","name":"rewardedVideosetListener","palette":"37","type":"c","spec":"rewardedListener onComplete"},{"code":"rewardedVideo.loadAd(StartAppAd.AdMode.REWARDED_VIDEO, new AdEventListener() {\n%1$s\n});","name":"rewardedVideoLoad","palette":"37","type":"c","spec":"rewardedVideoLoad"},{"code":" @Override\npublic void onReceiveAd(Ad ad) {\n%1$s\n}","name":"onSuccessVideoLoad","palette":"37","type":"c","spec":"onSuccessVideoLoad"},{"code":" @Override\npublic void onFailedToReceiveAd(Ad ad) {\n%1$s\n}","name":"onFailedVideoLoad","palette":"37","type":"c","spec":"onFailedVideoLoad"},{"code":"rewardedVideo.showAd();","name":"showVideoAd","palette":"37","type":" ","spec":"showVideoAd"},{"code":"StartAppAd.showAd(%1$s.this);","name":"showInterstitialAd","palette":"37","type":" ","spec":"showInterstitialAd%m.activity"},{"code":"Banner %1$s \u003d new Banner(%2$s.this);\n%1$s.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));\n%3$s.addView(%1$s);","name":"CreateBannerAd","palette":"37","type":" ","spec":"CreateBannerAd withName%s.inputOnly at%m.activity inflateTo%m.view"},{"code":"StartAppSDK.init(%3$s.this, %1$s, %2$s);","name":"StartApp","palette":"37","type":" ","spec":"StartApp AppID%s setReturnAd%b at %m.activity"},{"code":"StartAppSDK.setTestAdsEnabled(true);","name":"StartAppTestAdMode","palette":"37","type":" ","spec":"StartAppSDKsetTestAdsEnabled"},{"code":"StartAppSDK.init(this, %1$s, new SDKAdPreferences()\n.setAge(%2$s));","name":"StartApp_Pref","palette":"37","type":" ","spec":"StartApp_Pref AppID %s TargetAge %s.inputOnly"},{"code":"// Define StartApp Mrec\nMrec startAppMrec \u003d new Mrec(%2$s.this);\nRelativeLayout.LayoutParams mrecParameters \u003d\n            new RelativeLayout.LayoutParams(\n                        RelativeLayout.LayoutParams.WRAP_CONTENT,\n                        RelativeLayout.LayoutParams.WRAP_CONTENT);\nmrecParameters.addRule(RelativeLayout.CENTER_HORIZONTAL);\nmrecParameters.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);\n\n// Add to main Layout\n%1$s.addView(startAppMrec, mrecParameters);","name":"StartAppMrecBanner","palette":"37","type":" ","spec":"%m.view add_MREC_Banner at %m.activity"},{"code":"((BaseAdapter)%1$s.getAdapter()).notifyDataSetChanged();","name":"RefreshData","palette":"10","type":" ","spec":"%m.GridView refresh"},{"code":"%1$s.getTrackDrawable().setColorFilter(Color.parseColor(\"%2$s\"), PorterDuff.Mode.SRC_IN);","color":"#00838F","name":"switch off color","typeName":"","palette":"19","type":" ","spec":"%m.switch  off color %m.color"},{"code":"position","name":"position","palette":"12","type":"d","spec":"position"},{"code":"final String %1$s \u003d %2$s;","name":"finalString_copy59","palette":"19","type":" ","spec":"FinalStringName %s.inputOnly dataString %s"},{"code":"%1$s.setThumbResource(R.drawable.%2$s);","color":"#00838F","name":"switch on","typeName":"","palette":"19","type":" ","spec":"%m.switch set on color %m.color"},{"code":"%1$s","name":"getString","typeName":"String","palette":"19","type":"v","spec":"StringName %s.inputOnly"},{"code":"//*//","color":"#943D51","name":"ATPH AutoInject","typeName":"","palette":"38","type":"h","spec":"ATPH AutoInject"},{"code":"}\nprivate class DownloadTask extends AsyncTask\u003cString, Integer, String\u003e {\nKProgressHUD %1$s;\n@Override\nprotected void onPreExecute() {\nsuper.onPreExecute();\n%2$s\n}\n@Override\nprotected String doInBackground(String... address) {\ntry {\nfilename\u003d URLUtil.guessFileName(address[0], null, null);\nint resCode \u003d -1;\njava.io.InputStream in \u003d null;\njava.net.URL url \u003d new java.net.URL(address[0]);\njava.net.URLConnection urlConn \u003d url.openConnection();\nif (!(urlConn instanceof java.net.HttpURLConnection)) {\nthrow new java.io.IOException(\"URL is not an Http URL\"); }\njava.net.HttpURLConnection httpConn \u003d (java.net.HttpURLConnection) urlConn; httpConn.setAllowUserInteraction(false); httpConn.setInstanceFollowRedirects(true); httpConn.setRequestMethod(\"GET\"); httpConn.connect();\nresCode \u003d httpConn.getResponseCode();\nif (resCode \u003d\u003d java.net.HttpURLConnection.HTTP_OK) {\nin \u003d httpConn.getInputStream();\nsize \u003d httpConn.getContentLength();\n\n} else { result \u003d \"There was an error\"; }","color":"#943D51","name":"Autinject PreexecuteHUD","typeName":"","palette":"38","type":"c","spec":"1. Autinject PreExecute w/ HUD %s.inputOnly "},{"code":"/**/\n%s","color":"#943D51","name":"1.at","typeName":"","palette":"38","type":"c","spec":"1.a Put your path below"},{"code":"java.io.File file \u003d new java.io.File(path);\n\njava.io.OutputStream output \u003d new java.io.FileOutputStream(file);\ntry {\nint bytesRead;\nsumCount \u003d 0;\nbyte[] buffer \u003d new byte[1024];\nwhile ((bytesRead \u003d in.read(buffer)) !\u003d -1) {\noutput.write(buffer, 0, bytesRead);\nsumCount +\u003d bytesRead;\nif (size \u003e 0) {\npublishProgress((int)Math.round(sumCount*100 / size));\n}\n}\n} finally {\noutput.close();\n}\nresult \u003d\"\";\nin.close();\n} catch (java.net.MalformedURLException e) {\nresult \u003d e.getMessage();\n} catch (java.io.IOException e) {\nresult \u003d e.getMessage();\n} catch (Exception e) {\nresult \u003d e.toString();\n}\nreturn result;\n\n}\n@Override\nprotected void onProgressUpdate(Integer... values) {\nsuper.onProgressUpdate(values);\n%1$s\n}","color":"#943D51","name":"progressm","typeName":"","palette":"38","type":"c","spec":"2. ProgressUpdater"},{"code":"@Override\nprotected void onPostExecute(String s){\n\n%1$s\n}","color":"#943D51","name":"endod","typeName":"","palette":"38","type":"c","spec":"3. Unzip file below"},{"code":"values[values.length - 1]","color":"#FF0277BD","name":"values","typeName":"","palette":"9","type":"d","spec":"Values Update"},{"code":"%s","color":"#FFC62828","name":"Coderteam","typeName":"","palette":"9","type":"c","spec":"\u003c/CODERZ TEAM\u003e"},{"code":"KProgressHUD.create(MainActivity.this).setStyle(KProgressHUD.Style.SPIN_INDETERMINATE)\n.%1$s\n.show();","color":"#943D51","name":"SpinnerOnly","typeName":"","palette":"38","type":"c","spec":"SpinnerOnlyHUD"},{"code":"%1$s.setGraceTime(%1$s);","color":"#943D51","name":"GraceTime","typeName":"","palette":"38","type":" ","spec":"%s.inputOnly SetGraceTime %d"},{"code":"%1$s \u003d new KProgressHUD(%5$s.this).setStyle(KProgressHUD.Style.SPIN_INDETERMINATE).setLabel(\"%2$s\").setDetailsLabel(\"%3$s\").setCancellable(%4$s);\n%6$s\n%1$s.show();","color":"#943D51","name":"Spinner w/ Label","typeName":"","palette":"38","type":"c","spec":"%s.inputOnly SpinnerHUD Label %s.inputOnly Details %s.inputOnly Cancellable %b to %m.activity"},{"code":"%1$s \u003d new KProgressHUD(%3$s.this).setStyle(KProgressHUD.Style.PIE_DETERMINATE).setLabel(\"%2$s\")\n.setMaxProgress(100);\n%4$s\n%1$s.show();\n","color":"#943D51","name":"PieHUDd","typeName":"","palette":"38","type":"c","spec":"PieHUD Name %s.inputOnly Label %s.inputOnly to %m.activity"},{"code":"%1$s \u003d new KProgressHUD(%3$s.this).setStyle(KProgressHUD.Style.ANNULAR_DETERMINATE).setLabel(\"%2$s\")\n.setMaxProgress(100);\n%4$s\n%1$s.show();\n","color":"#943D51","name":"AnnularHUDd","typeName":"","palette":"38","type":"c","spec":"AnnularHUD Name %s.inputOnly Label %s.inputOnly to %m.activity"},{"code":"%1$s \u003d new KProgressHUD(%3$s.this).setStyle(KProgressHUD.Style.BAR_DETERMINATE).setLabel(\"%2$s\")\n.setMaxProgress(100);\n%4$s\n%1$s.show();\n","color":"#943D51","name":"BarHUDd","typeName":"","palette":"38","type":"c","spec":"BarHUD Name %s.inputOnly Label %s.inputOnly to %m.activity"},{"code":"%1$s.setProgress(%2$s);\n%1$s.setDetailsLabel(String.valueOf((long)(%2$s)).concat(\"%3$s\"));","color":"#943D51","name":"CustomProgg","typeName":"","palette":"38","type":" ","spec":"SetProgress Name %s.inputOnly %d with label  %s.inputOnly"},{"code":"%1$s.setDimAmount(0.%2$sf);","color":"#943D51","name":"Dimmer","typeName":"","palette":"38","type":" ","spec":"%s.inputOnly Set Dim %d (1-9 only)"},{"code":"}\n\nprivate class DownloadTask extends AsyncTask\u003cString, Integer, String\u003e {\n\n","color":"#FFC62828","name":"AutoInject","typeName":"","palette":"9","type":"s","spec":"LotusVolt"},{"code":"%s\n @Override\nprotected void onPreExecute() {\nsuper.onPreExecute();\n%s\n}\nprotected String doInBackground(String... address) {\ntry {\nfilename\u003d URLUtil.guessFileName(address[0], null, null);\nint resCode \u003d -1;\njava.io.InputStream in \u003d null;\njava.net.URL url \u003d new java.net.URL(address[0]);\njava.net.URLConnection urlConn \u003d url.openConnection();\nif (!(urlConn instanceof java.net.HttpURLConnection)) {\nthrow new java.io.IOException(\"URL is not an Http URL\"); }\njava.net.HttpURLConnection httpConn \u003d (java.net.HttpURLConnection) urlConn; httpConn.setAllowUserInteraction(false); httpConn.setInstanceFollowRedirects(true); httpConn.setRequestMethod(\"GET\"); httpConn.connect();\nresCode \u003d httpConn.getResponseCode();\nif (resCode \u003d\u003d java.net.HttpURLConnection.HTTP_OK) {\nin \u003d httpConn.getInputStream();\nsize \u003d httpConn.getContentLength();\n\n} else { result \u003d \"There was an error\"; }\n%s","color":"#FF0277BD","name":"onCreateInject","typeName":"","palette":"9","type":"e","spec":"AutoInject %s OnExecuted","spec2":"FilePath"},{"code":"java.io.File file \u003d new java.io.File(%s);\n\njava.io.OutputStream output \u003d new java.io.FileOutputStream(file);\ntry {\nint bytesRead;\nsumCount \u003d 0;\nbyte[] buffer \u003d new byte[1024];\nwhile ((bytesRead \u003d in.read(buffer)) !\u003d -1) {\noutput.write(buffer, 0, bytesRead);\nsumCount +\u003d bytesRead;\nif (size \u003e 0) {\npublishProgress((int)Math.round(sumCount*100 / size));\n}\n}\n} finally {\noutput.close();\n}\nresult \u003d filename + \" saved\";\nin.close();\n} catch (java.net.MalformedURLException e) {\nresult \u003d e.getMessage();\n} catch (java.io.IOException e) {\nresult \u003d e.getMessage();\n} catch (Exception e) {\nresult \u003d e.toString();\n}\nreturn result;\n\n}\nprotected void onProgressUpdate(Integer... values) {\n%s\nprotected void onPostExecute(String s){\n\nshowMessage(s);\n%s\n\n}","color":"#FF0277BD","name":"progress","typeName":"","palette":"9","type":"e","spec":"SetProgres %s  Value","spec2":"Executed"},{"code":"%s","color":"#FFC62828","name":"Executed","typeName":"","palette":"9","type":"s","spec":"Executed %s "},{"code":"%1$s.setText(\"%2$s\");\n%3$s.setVisibility(View.%4$s);","color":"#FFC62828","name":"setvisible","typeName":"","palette":"9","type":" ","spec":"SetActive %m.textview SetText %s.inputOnly SetLinear %m.view Visible %s.inputOnly "},{"code":"%s.setText(values[values.length - 1] + \" %s \");","color":"#FFC62828","name":"SetValue","typeName":"","palette":"9","type":" ","spec":"SetText %m.view Value %s.inputOnly  "},{"code":"%s.setProgress(%s);\n}","color":"#FFC62828","name":"SetProgValue","typeName":"","palette":"9","type":" ","spec":"SetPrgress %m.view Value %d "},{"code":"new DownloadTask().execute(%1$s);","color":"#FF0277BD","name":"seturl","typeName":"","palette":"9","type":" ","spec":"Executed GitHab setURL %s"},{"code":"%s \u003d %s;","color":"#FFC62828","name":"ReadFilePath","typeName":"","palette":"9","type":" ","spec":"String %s Filepath %s"},{"code":"try{java.io.File outdir \u003d new java.io.File(_dir);java.util.zip.ZipInputStream zin \u003d new java.util.zip.ZipInputStream(new java.io.FileInputStream(_file_zip));java.util.zip.ZipEntry entry;String name, dir;while ((entry \u003d zin.getNextEntry()) !\u003d null){name \u003d entry.getName();if(entry.isDirectory()){mkdirs(outdir, name);continue;} /* this part is necessary because file entry can come before* directory entry where is file located* i.e.:* /foo/foo.txt* /foo/*/ dir \u003d dirpart(name);if(dir !\u003d null)mkdirs(outdir, dir); extractFile(zin, outdir, name);}zin.close();}catch (java.io.IOException e){e.printStackTrace();}\n\n}private static void extractFile(java.util.zip.ZipInputStream in, java.io.File outdir, String name) throws java.io.IOException{byte[] buffer \u003d new byte[4096];java.io.BufferedOutputStream out \u003d new java.io.BufferedOutputStream(new java.io.FileOutputStream(new java.io.File(outdir, name)));int count \u003d -1;while ((count \u003d in.read(buffer)) !\u003d -1)out.write(buffer, 0, count);out.close();} private static void mkdirs(java.io.File outdir, String path){java.io.File d \u003d new java.io.File(outdir, path);if(!d.exists())d.mkdirs();} private static String dirpart(String name){int s \u003d name.lastIndexOf(java.io.File.separatorChar);return s \u003d\u003d -1 ? null : name.substring(0, s);","color":"#FFC62828","name":"UnzipPath","typeName":"","palette":"9","type":" ","spec":"Unzip filepath by Lotus Volt","spec2":"To File Path"},{"code":"/storage/emulated/0/%s/%s","color":"#FF0091EA","name":"GetExternalMemory","typeName":"","palette":"9","type":"s","spec":"GetExternalMemory Folder %s  path \u003d %s "}]